// Code generated by go-bindata. DO NOT EDIT.
// sources:
// faucet.html (10.893kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3a\xdb\x72\xe3\x3a\x72\xcf\x9e\xaf\xe8\x65\x66\x8f\xa4\x8c\x79\xd1\xd5\xb2\x2c\xea\xd4\xc8\xf6\xec\x3a\x55\x99\x9d\xda\x99\x53\xd9\xd4\xd9\x53\x29\x90\x68\x49\x18\x93\x00\x0f\x00\xca\xd6\xba\xf4\x9e\xd7\x7c\x41\x7e\x31\x9f\x90\x02\x78\x11\x75\xb1\x77\x2e\x67\x2b\x15\x3f\xc8\x04\xd0\xe8\x6e\xf4\x1d\x4d\x4e\x7f\x77\xf3\xa7\xeb\x4f\xff\xfe\xe1\x16\x56\x3a\x4d\x66\xaf\xa6\xe6\x1f\x24\x84\x2f\x43\x07\xb9\x33\x7b\x75\x36\x5d\x21\xa1\xb3\x57\x67\x67\xd3\x14\x35\x81\x78\x45\xa4\x42\x1d\x3a\xb9\x5e\xb8\x63\x67\xb7\xb0\xd2\x3a\x73\xf1\xd7\x9c\xad\x43\xe7\x2f\xee\x4f\x6f\xdd\x6b\x91\x66\x44\xb3\x28\x41\x07\x62\xc1\x35\x72\x1d\x3a\x77\xb7\x21\xd2\x25\x36\xf6\x71\x92\x62\xe8\xac\x19\x3e\x64\x42\xea\x06\xe8\x03\xa3\x7a\x15\x52\x5c\xb3\x18\x5d\x3b\x38\x07\xc6\x99\x66\x24\x71\x55\x4c\x12\x0c\xbb\xce\xec\x95\xc1\xa3\x99\x4e\x70\xf6\xf4\xe4\xbd\x47\xfd\x20\xe4\xfd\x76\x3b\x81\x77\x24\x8f\x51\x4f\xfd\x62\xcd\x82\x25\x8c\xdf\xc3\x4a\xe2\x22\x74\x0c\xb3\x6a\xe2\xfb\x31\xe5\x9f\x95\x17\x27\x22\xa7\x8b\x84\x48\xf4\x62\x91\xfa\xe4\x33\x79\xf4\x13\x16\x29\x5f\x3f\x30\xad\x51\xba\x91\x10\x5a\x69\x49\x32\xbf\xef\xf5\xbd\x0b\x3f\x56\xca\xaf\xe7\xbc\x94\x71\x2f\x56\xca\x01\x89\x49\xe8\x28\xbd\x49\x50\xad\x10\xb5\x03\xfe\xec\xdb\xe8\x2e\x04\xd7\x2e\x79\x40\x25\x52\xf4\x07\xde\x85\x17\x58\x92\xcd\xe9\x97\xa9\x1a\xb2\x2a\x96\x2c\xd3\xa0\x64\xfc\xc5\x74\x3f\xff\x9a\xa3\xdc\xf8\x7d\xaf\xeb\x75\xcb\x81\xa5\xf3\x59\x39\xb3\xa9\x5f\x20\x9c\x7d\x17\x6e\x97\x0b\xbd\xf1\x7b\xde\xc0\xeb\xfa\x19\x89\xef\xc9\x12\x69\x45\xc9\x2c\x79\xd5\xe4\x6f\x46\xf7\x39\x1d\x7e\x3e\x54\xe1\x6f\x41\x2c\x15\x29\x72\xed\x7d\x56\x7e\xcf\xeb\x8e\xbd\xa0\x9a\x38\xc6\x6f\x09\x18\xa5\x19\x52\x67\xde\x1a\xa5\x66\x31\x49\xdc\x18\xb9\x46\x09\x4f\x66\xf6\x2c\x65\xdc\x5d\x21\x5b\xae\xf4\x04\xba\x41\xf0\xfb\xab\x53\xb3\xeb\x55\x31\x4d\x99\xca\x12\xb2\x99\xc0\x22\xc1\xc7\x62\x8a\x24\x6c\xc9\x5d\xa6\x31\x55\x13\x28\x30\xdb\x85\xad\xa5\x99\x49\xb1\x94\xa8\x54\x49\x2c\x13\x8a\x69\x26\xf8\xc4\x58\x14\xd1\x6c\x8d\xa7\x60\x55\x46\xf8\xd1\x06\x12\x29\x91\xe4\x1a\x0f\x18\x89\x12\x11\xdf\x17\x73\xd6\x7f\x9b\x87\x88\x45\x22\xe4\x04\x1e\x56\xac\xdc\x06\x96\x10\x64\x12\x4b\xf4\x90\x11\x4a\x19\x5f\x4e\x60\x94\x95\xe7\x81\x94\xc8\x25\xe3\x13\x08\x76\x5b\xa6\x7e\x25\xc6\xa9\x5f\x84\xaa\x57\x67\xd3\x48\xd0\x8d\x99\xa1\x6c\x0d\x8c\x86\x8e\xc4\x98\x64\x3a\x5e\x91\xff\xc0\x04\x8d\x46\x8c\x2a\x28\x5b\x5b\xe0\x0a\xa8\x88\x3c\x74\x2e\xe8\xc6\x81\x38\x21\x4a\x85\xce\x81\x5e\x6c\xdc\x2a\x76\x94\x00\x66\x13\x61\xbc\x5a\xda\x5b\x93\xe2\xc1\x01\xcb\x5d\xe8\x14\x9c\xbb\x91\xd0\x5a\xa4\x13\xe8\x9a\x33\x95\x5b\x0e\xf0\x25\x6e\xb2\x74\xbb\x3d\x67\xf6\x0a\x9e\xf9\x9b\xae\xba\x15\x5a\x8d\x8f\xda\xb5\x6a\xae\x15\xec\xcc\xa6\xac\xc2\xb6\x20\xb0\x20\x6e\x44\xf4\xca\x01\x22\x19\x71\x57\x8c\x52\xe4\xa1\xa3\x65\x8e\x46\x06\x6c\xf6\x69\xc5\x14\x3c\x60\xa4\x98\x46\x78\x60\x49\x02\x5c\x40\x22\xf8\x12\x25\x44\x08\x29\x61\xc5\x01\xe9\x34\x92\xfe\x6c\x4a\x0e\x22\x19\x65\x2a\x16\x92\x5a\x3f\x88\x57\x84\x73\x4c\x94\x7f\x31\xbe\x1c\x04\xbd\xe1\xa8\x1f\xf4\x87\xa3\x51\xd0\x0f\xc6\x7e\xb7\x1b\x74\x83\x5e\x6f\xd8\x1b\x0d\x87\xc1\x78\x70\x31\x0c\xc6\xce\xec\x43\x82\x44\x21\xac\x99\x62\x1a\xf4\x0a\x81\xe3\x03\xac\x51\x2a\x26\x38\x44\x1b\x88\x13\x16\xdf\x33\xbe\x84\xff\xf9\xef\xff\xfa\x4f\x6f\xea\x93\xd9\xd4\x5f\x75\x2b\xa9\x15\x0a\x3c\x7c\x3c\x90\xff\xf3\x22\x1e\x43\xf9\x20\x16\x0b\x85\xda\xed\x55\xb0\x7b\xc0\x8c\x67\xb9\x76\x97\x52\xe4\x59\xbd\x7e\x36\xb5\xb3\xd6\x68\x72\x99\x38\x65\x0e\xb3\x8f\x7a\x93\x95\x6a\xa9\x6d\x68\x21\x64\xea\x1a\x3b\x91\x22\x71\x20\x4b\x48\x8c\x2b\x91\x50\x94\xa1\x73\x67\xf1\x6c\x44\x2e\x61\xfe\x7e\x0e\x1f\x53\x22\x35\x5c\xaf\x08\xe3\x40\x28\x35\x0e\xe7\x79\x5e\x83\xae\xf5\xbe\x63\xce\xdc\x48\xf3\x1d\xd4\xd9\x34\xca\xb5\x16\x35\x60\xa4\x39\x44\x9a\xbb\x14\x17\x24\x4f\x34\x50\x29\x32\x2a\x1e\xb8\xab\xc5\x72\x69\xb2\x73\xc1\x73\xb1\xc9\x01\x4a\x34\x29\x97\x42\xa7\x82\xad\xcc\x87\xa8\x4c\x64\x79\x56\x1a\x50\x31\x89\x8f\x19\xe1\x14\xa9\x31\xb7\x44\xa1\x33\xfb\x03\x5b\x23\xa4\x68\x8e\x74\x76\x68\x8b\x31\x91\xa8\xdd\x26\xca\x23\x8b\x9c\xfa\x05\x2b\xc5\x81\x6a\xa3\xcf\x93\x0a\x53\x7d\x80\x14\x79\x0e\x7b\x23\x57\x9a\xb8\x58\xcb\x02\xe0\xe9\x49\x12\xbe\x44\x78\xcd\xe8\xe3\x39\xbc\x26\xa9\xc8\xb9\x86\x49\x08\xde\x5b\xfb\xa8\xb6\xdb\x3d\x32\x00\xd3\x84\x81\xb1\xf3\x17\x3c\x0c\x04\xb7\xa6\x19\x3a\x9a\xa1\x0c\x9f\x9e\x0c\xf6\xed\xf6\x4a\x6d\xd2\x48\x24\x61\x6b\xfe\x7e\xde\xba\x52\x79\x94\x32\xdd\xee\x38\xb3\xa7\xa7\x92\xee\x76\x5b\xd8\x70\xc2\x66\x4f\x4f\xc8\xe9\x01\xed\xa9\x9f\x27\x3b\x5d\xfb\x46\xd9\xff\xdf\x54\xff\x01\x97\xcb\x0d\x68\x71\x8f\x5c\xfd\x1f\xa9\x7e\xa7\xf2\x42\x1d\xe7\xf0\x3a\xc2\xac\x87\x77\x7c\x21\xac\xe2\xe7\xd5\xa8\xd2\xbd\x15\x5c\xc2\xbe\x58\xe9\xa5\x9a\x9f\x9e\x4a\x0a\xdb\xed\x15\xec\x69\xbb\xa6\x57\x1a\xd9\x47\x2d\xb7\x5b\x68\xc0\x7f\xab\x19\x34\x02\xdd\x17\xc6\xbf\x83\xfc\xa3\x45\x36\x81\x7e\xaf\x91\x7c\x4e\x85\xc6\xd1\x41\x68\xec\x9f\x04\xce\x08\xc7\x04\xec\xaf\xab\x52\x92\x54\xcf\xa5\xb1\x35\xc2\xd6\xe1\x26\x37\xb2\x39\xb6\x64\xad\xce\xf3\xc1\x15\x88\x35\xca\x45\x22\x1e\x26\x40\x72\x2d\xae\x20\x25\x8f\x75\xad\xd3\x0f\x82\x26\xdf\xa6\xf0\x27\x51\x82\x65\x82\xff\x35\x47\xa5\x55\x1d\x74\x8b\x25\xfb\x6b\x62\x2f\x45\xae\x90\x1e\x48\xc3\x50\x34\x76\x67\xa1\x1a\x12\xdf\xc9\xf8\x14\xef\x0b\x21\xea\x4a\xa0\xc9\x46\x89\xba\x51\xe9\x38\xb3\xa9\x96\x3b\xb8\xb3\xa9\xa6\x5f\x95\xb7\xa5\x29\xef\x9f\xf1\x14\x28\x02\x82\x39\x7b\x86\x28\x8b\xda\xd2\x58\x0a\xd8\xe1\xd4\xd7\xf4\x3b\x28\x9b\x40\x10\x11\x85\x5f\x42\xde\x56\x79\x3b\xf2\x76\xf8\xbd\xf4\x57\x48\xa4\x8e\x90\xe8\x2f\x61\x60\x91\x73\xda\x38\xff\xfc\xfd\xfc\x7b\xc9\xe7\x9c\xd9\x2a\x44\x6f\xbe\x94\x3e\xd2\x1d\x03\xc5\x78\x9f\x85\xa9\xaf\xe5\xcb\x96\xf6\x0f\x70\xed\xe7\xea\xca\x92\xe0\xaa\x3f\xfb\xa3\x78\x00\x2a\x50\x81\xb6\x55\xa0\x90\xf7\x3f\x4e\xfd\x55\xbf\x06\xc9\x8e\x0b\x3e\x8d\x4a\x73\xd4\x5e\xa4\x62\x15\x13\x5e\x5c\x80\x8a\x5a\xc5\x0f\x1e\x47\x31\x8e\xe9\xdb\xde\xf8\xb6\xb7\x18\x8f\x06\x83\x5e\x30\x1e\x04\xf1\xbb\x8b\xc1\xe0\x62\x80\xef\x16\xc3\xc5\xcd\x38\xb8\x1d\x0d\xe7\x63\x67\x36\xff\x74\x6d\xa2\xe0\xf9\x57\x12\xa0\xa3\x51\x3c\x9a\x0f\xde\x05\x11\x8e\xaf\x6f\x87\x51\xff\xf2\x66\xd8\xbb\x0d\xde\xd1\x6e\x7f\x30\x88\xfb\xe3\xcb\xcb\xde\xe5\xbc\x7f\x31\x76\x66\xb7\x9f\xfe\xf8\x2d\x04\xc8\xb8\x3f\xbc\x18\x0e\x2e\x83\x9b\x0b\xba\x18\xdc\xf6\xde\x0d\x2e\xa2\x8b\x9b\xfe\x18\x17\xfd\x61\x97\xf4\x2e\x7a\xbd\xf8\xed\x60\x18\x5d\x3a\xb3\xbf\xfc\xf9\xc3\xb7\x10\x40\xda\x1b\x2c\xe2\xfe\x88\x0e\x11\x7b\xdd\x2e\x92\xde\x90\x8c\x83\x5e\xff\x72\x11\x8d\xe3\x41\xbc\xa0\xe3\x60\xd1\xed\x21\x3a\xb3\xf9\x4f\x1f\x6f\xbe\x85\x42\xbf\x7f\x31\xea\x06\xb4\x77\x11\x8f\xc6\xbd\xdb\xfe\xe0\xe2\xfa\x32\xbe\x19\x05\xf3\x9b\x41\xd4\x8f\xba\xc1\xc5\xf5\x25\xed\x0f\xe8\x0d\x75\x66\x3f\x7d\xbc\xf9\xf4\x2d\x14\x46\x83\xe1\x60\x70\x39\xba\x44\x7a\x71\x3b\x5f\x0c\x17\xc1\xb8\x3f\xba\xb8\xec\xf5\xfb\xfd\xde\xb0\x3f\x1c\xdd\x46\xb7\x17\xfd\xf1\x65\x3f\xb0\x14\xbe\x49\xcf\xb7\xd7\x43\x7a\x1d\x0d\x6f\xa2\xc5\x60\xde\xed\x0e\xae\x2f\x69\xf0\x6e\x34\x9c\xc7\xd7\x6f\xa3\xc1\xe5\xed\xf5\x70\xf0\x6e\xf4\x36\x18\x8f\x2e\x9c\xd9\xcd\xdb\x3b\x43\x00\x88\x44\x60\x4a\xe5\x48\x81\x28\x98\xdf\x7e\xe8\x05\x45\x21\xe2\x4d\xfd\xac\x61\xd1\x70\x6d\xb2\x38\x68\x01\x4b\xd4\x40\x51\x13\x96\x00\x89\x44\xae\xe1\x88\xc7\x25\xd3\xab\x3c\xb2\xac\x45\x3c\x72\x63\x53\x99\xfb\xf3\xdb\x0f\xca\x8f\x12\x11\xf9\x29\x51\x1a\xa5\x6f\x69\x79\x29\x75\x66\xf6\xc9\x70\x53\xd0\x6c\x10\xfd\x98\x67\x99\x90\x1a\x6e\x8a\xfb\xd2\x64\x9f\x56\xe3\x22\xb5\x5c\x1a\x52\x96\x92\x33\x83\x13\xb3\x60\x4f\xdb\x38\xd3\xd3\x13\x5b\x80\xf7\xe7\xea\x8a\xbb\xdd\x4e\x31\x9d\x7d\x5a\x21\x2c\x6c\x0f\x0c\x98\x02\x99\x73\x6e\xee\x51\x12\xaf\x0b\x20\xc8\xa4\xd0\x18\x9b\xeb\x3b\x90\x25\x61\x5c\x69\x88\x84\x56\xde\xd4\xc7\x74\xaf\x2a\x39\x1d\x8c\xea\xa7\xfa\x1a\x5d\xf5\x4b\xec\xb2\xef\xc3\x1f\x12\x11\x91\x04\xd6\x26\x7e\x46\x89\x09\x31\x02\xcc\xb5\xc7\xde\xf3\xe2\x5c\x4a\xe4\x1a\x94\x26\x3a\x57\x20\x16\x76\xb6\xe0\xd7\xec\x5f\x13\x09\x44\x6b\x4c\x33\x0d\x61\x79\xdb\x37\x73\x0a\xe5\xba\xec\x61\x98\xa1\xa9\xbe\xf7\xd7\x8b\xca\xcc\x71\xea\x99\xaa\x30\x80\x10\x7e\xfe\xa5\x9e\x2d\x45\x75\xf5\xaa\x64\xf6\x06\x17\x8c\x23\x10\x13\xbb\x0b\xa1\xe8\x15\xd1\x10\x4b\x24\x1a\x15\xc4\x89\x50\xb9\x2c\xce\x60\x6a\x4e\x30\xe7\xa8\x30\x57\x38\xcd\x42\x66\xf9\xa9\x90\xb4\x57\x44\xad\x3a\x65\x3b\x43\xa2\xce\x25\xdf\xad\x55\xf3\x67\x0b\x21\xa1\x6d\x10\xb0\x30\xb8\x02\x36\xad\xf0\x7a\x09\xf2\xa5\x5e\x5d\x01\x7b\xf3\xa6\x06\x3e\x63\x0b\x68\x57\x10\x3f\xb3\x5f\x3c\xfd\xe8\x19\x2a\x10\x86\xd0\xa4\x66\x09\x96\x78\x54\x96\xb0\x18\xdb\xec\x1c\xba\x9d\xab\x6a\x35\x92\x48\xee\xab\x51\xa9\xe9\xe2\x9f\xfd\xdd\x16\xa2\xa1\x22\xce\x6d\x03\x6b\x89\xfa\xb6\xe8\x9c\xcc\x37\x77\xb4\xbd\xd7\x2b\xe9\x78\x36\x11\x79\x65\xdf\x07\x42\x70\xb8\xe0\xe8\x14\x28\x0a\x25\x94\x02\xbf\x26\x49\x12\x91\xf8\xbe\x29\xa4\x8a\xe5\x55\x09\xe3\x49\xe4\x14\x65\xbb\x75\xd4\xb4\x69\x9d\x57\xa7\x6b\x29\xa6\xf1\x1e\x37\x2d\x98\x40\xeb\xe9\xa9\x69\xfc\xad\xf3\x12\x24\x2e\x69\x19\x18\xa2\x14\x5b\xf2\x8a\x7a\x01\xb1\x2d\x84\xb1\xdd\xb1\xb9\x0f\xd5\xe4\x71\x59\xa2\xaf\x78\xfd\x56\xb9\x14\xb5\xd2\xd5\xcb\x38\x8e\x9b\x55\xcf\x4b\xd8\x20\x2a\xa1\x21\x84\x65\x6d\xd7\xc5\xc1\xf6\x8c\xdb\x7a\xd8\x9e\x79\x17\x77\x16\x05\x04\x96\x4c\x69\xc8\x65\x62\x0c\xdc\xc0\x15\x7e\x56\x7b\x95\x85\x3b\xa5\xb3\x02\xce\x53\xc8\x69\xfb\x5f\x3e\xfe\xe9\xbd\xa7\xb4\x64\x7c\xc9\x16\x9b\xf6\x53\x2e\x93\x09\xbc\x6e\x3b\xff\x94\xcb\xc4\xe9\xfc\x1c\xfc\xe2\xad\x49\x92\xe3\x79\xe9\xa4\x13\xa8\xae\x67\xc6\x8b\x27\xf6\xf7\x28\x92\x9d\x57\x9e\x3a\xa9\x1e\xca\xd0\xb4\xed\x74\xae\x8e\xa0\x0f\xcd\x48\xa1\x6e\x1b\xb0\x3a\x98\x1d\x8a\x84\x40\x8a\x7a\x25\xa8\x39\xb6\xc4\x58\x70\x8e\xb1\x86\x3c\x13\xbc\x94\x00\x24\x42\xa9\x86\x15\x97\x10\xcf\x4a\x02\x42\xdb\xc2\xfa\x37\x8c\x3e\x8a\xf8\x1e\x75\xbb\xdd\x7e\x60\x9c\x8a\x07\x2f\x11\x31\x31\x1b\x3c\x13\x78\x45\x2c\x12\x08\xc3\x10\xca\x44\xe3\x74\xe0\x47\x70\x1e\x94\x49\x39\x0e\x4c\xcc\xa3\x79\xea\xc0\x1b\x38\xdc\xbe\x12\x4a\xc3\x1b\x70\xfc\x22\x58\x9a\x8b\x97\xd4\x3e\xc9\x98\xd3\x29\x0c\xb9\xd2\x89\xe0\x29\x2a\x45\x96\xd8\xe4\x16\xd7\xc8\x75\x1d\x23\xcc\xa1\x52\xb5\x84\x10\xac\xee\x32\x22\x15\x16\x20\x9e\xb9\x00\x54\xc1\xc2\x84\x1c\x0b\x16\x86\xc0\xf3\x24\xd9\xc5\x98\x22\xa6\x5d\x55\xd1\x63\x0f\xdc\xb3\x65\x39\xfc\x2e\x0c\xc1\xd4\xc3\x46\xde\x74\xb7\xd3\xd8\x45\x51\xb7\x77\x3c\x53\x92\xef\x76\x74\xae\x9a\xc1\x68\x0f\x1b\xd2\xbf\x87\x0e\xe9\x21\x3e\xa4\xcf\x20\xb4\xd7\xa4\x97\xf0\x15\xd7\xaa\x06\x3a\x3b\xf1\x0c\x36\x9e\xa7\x11\xca\x97\xd0\x15\xae\x5f\xa2\xb3\xa2\xbe\xe3\xba\xb1\xf7\x1c\xba\xa3\xce\x33\xd8\x51\x4a\xf1\x2c\x72\x2e\xf4\xa6\xfd\x94\x90\x8d\xc8\xf5\x04\x5a\x5a\x64\xd7\xf6\x5e\xd3\x3a\x07\x43\x6b\x02\x35\x86\x73\xdb\xee\x99\x40\xcb\x8e\xcc\x3a\x4b\xd1\xee\x1a\x06\x41\x70\x0e\x55\x93\x7f\x4e\x8c\x3f\xca\x1c\xb7\xcf\xf0\xa3\xf2\x38\x46\xf5\xac\xf4\xbe\x88\xa3\x12\x47\xcd\x53\x39\xfe\x0e\xae\xea\x54\xbf\xc7\x16\xfc\xf0\x03\x1c\xad\xee\x9b\xb1\xef\xc3\xbf\x12\x79\x0f\xb6\x85\x21\x71\xcd\x44\xae\x76\x85\x43\xca\x94\x32\xb5\x13\x51\x40\x05\xc7\x72\xcf\xd7\x65\xed\x23\x1e\x4b\x30\x98\x41\x70\xc8\xa0\x89\x94\x8d\xac\x7e\x22\xd9\x37\xf0\xee\xe7\xf1\xb3\x6d\x93\xde\xde\x4e\x96\x22\xfc\x2e\x04\xc7\x69\x6e\x3e\x82\x30\x00\x35\xb2\x33\x85\xfa\x53\xa1\x8b\x76\x59\xdc\x9c\x2a\x3d\x3a\xe7\xd0\x0f\x82\xa0\x73\xc4\xc4\x76\x27\xde\xb7\x59\x86\x9c\x02\xe1\x1b\x1b\x1f\x6b\xd9\x32\xae\x05\x88\xdc\xc4\xd9\x98\x24\x10\x8b\x24\x29\x8a\xd2\x72\xab\xad\xd5\x44\x9a\x0a\x0e\x21\xb8\xdd\xab\x13\x45\x50\x43\x92\x8d\xa3\x1d\xaa\xe7\x84\xec\x0f\x55\xb4\x2f\xb3\x03\x60\xb7\xbb\xa7\x94\x3d\x7d\x9d\x56\xcc\x59\xcd\x37\xdb\x49\xf4\x40\x5d\x3b\x7d\x1d\xca\xac\xc1\x7f\x81\xe7\x4d\xf7\x0b\x8f\x51\x2f\x67\xb9\x5a\xb5\x0f\x18\xed\x5c\x1d\xeb\xe6\x4e\xa3\x24\x1a\x6d\xeb\xcd\xea\x02\xb9\x66\x12\x8f\x54\x02\x84\x9b\xa2\xd7\x2d\xca\xb3\xaa\x9c\xa0\xc6\x35\x6c\x5b\x63\x4f\x65\xf6\x1d\xfe\x9e\x39\x7d\xa5\xc3\xd8\x8a\x5a\x70\x04\x00\x38\x70\x02\x6b\xa8\x7b\x96\x6a\x80\x31\x21\x99\x42\x0a\x21\x14\xef\x5c\xdb\x1d\x2f\xe7\xec\xb1\xdd\x71\xcb\xf1\x21\x8e\x6a\xfd\xaa\xba\xa6\x9d\x55\x6c\xbf\x09\xc1\x99\x6a\x09\x8c\x86\x2d\x07\xde\x9c\x72\x41\x93\x82\x5b\xb3\x1d\x07\xcd\xad\x00\x53\x4d\x67\xb6\xf9\x52\x74\x68\xfe\xea\x98\x7a\x72\x29\x45\xce\xe9\xc4\x94\x59\xed\x23\xb4\x64\x4d\x34\x91\x16\x6b\xe7\x0a\x76\xe0\xae\x62\x7f\xc3\x09\xc4\x46\x39\x57\x50\xf4\x16\x6d\x8f\x07\xea\xae\xa8\x1d\x45\x42\x52\x94\xae\x24\x94\xe5\x6a\x02\x83\xec\xf1\xea\xaf\xd5\x3b\x4e\xdb\x89\x7a\x91\xd5\x4c\xe2\xec\x88\xa3\x38\xb6\xaf\x4a\xde\x80\x33\xf5\x0d\xc0\xdf\x43\x53\x1f\xb6\xf9\xae\x17\x4e\xf4\xdb\xa0\x7e\xa9\x5a\xce\xa7\x8c\xd2\x04\x0d\xc3\x3b\xf4\xc6\x19\x8d\xfe\x9b\x2e\xb5\x4f\x12\xca\x46\xdb\x6e\xcf\x16\x30\x51\xf8\xc2\x86\xba\x67\xd7\x32\x06\xe0\x9a\x23\x33\x2b\xf3\xb2\x4b\x66\xa7\x65\xcb\xca\xa2\x7c\x73\x4f\x73\x69\x0b\xaf\xb6\x5b\x1a\xd8\x39\xb4\x94\x29\x04\xa9\x6a\x75\xbc\x55\x9e\x12\xce\xfe\x86\x6d\x93\x97\x3a\x85\xac\x6c\x13\xd0\x39\x0e\xc9\x47\xcc\xec\xba\x73\xad\x2a\xc7\xb5\x4a\x21\xb6\x2a\xed\x1a\x45\x36\xde\x7a\xb7\xbe\x52\x42\xa7\xa9\xb8\x11\x91\xd0\x1c\xb8\x55\xf2\x05\x29\x0c\xf5\x6a\x2d\x22\xb2\x55\x34\x40\x6d\xe9\xce\xc5\x43\xd8\xea\x07\x35\x93\x85\xa2\xad\x9e\x5b\xa5\xad\x1d\x29\xc3\x70\x59\xb9\xe6\x0c\xfa\xc1\x6f\xc1\x2d\x25\xf6\xed\xf4\xfe\x09\xb4\x64\x19\x52\x20\xb1\x66\x6b\xfc\x07\x1c\xe4\x37\x10\xf2\x57\xb3\x68\xec\xb0\x12\x9e\x35\xd3\x3d\x7e\xcd\x6a\x2d\xdb\x7f\x36\xfe\x06\xbe\x95\xf0\x1b\x70\x4e\x1e\xe4\x59\x4b\x3c\x00\x3c\x70\xed\xe7\xfd\xde\x76\xb5\x9d\xc3\x9c\x62\xaa\xdd\xfa\x7d\x4c\xc7\x5b\xe9\x34\x69\x3b\x53\x6d\xbf\xc9\x30\x3c\xd7\x18\x2c\x82\x62\x7a\xbf\xa4\xdb\xee\x5f\x64\xe2\x44\x28\x3c\xb8\x74\x41\xa3\x38\xa9\x2f\x66\x55\x25\x02\xdb\xdd\xa7\x2b\xbe\x0f\x1f\x35\x91\x1a\x08\xfc\x74\x07\x79\x46\x89\x36\xd9\x4b\x80\xc9\x8f\x36\x8b\xd5\xdf\xb6\x44\x44\x2a\x58\x08\xf9\x40\x24\x85\x9c\x6b\x96\x98\xf5\x8d\xed\x2c\x56\xa5\x9f\x42\x7d\x67\xa2\xd8\x9a\x24\xed\xa3\x4b\xe0\xeb\x76\xcb\x6b\xaa\xbc\xd5\xf1\x90\xc4\xab\x63\x40\x9b\xb1\x6a\xba\x21\xbc\xb7\x57\x80\xf6\xeb\xb6\x5e\x31\xd5\xf1\x88\xd6\xb2\xdd\xda\x33\x86\x56\xc7\xe8\xb5\xdb\xb8\x92\xd5\xdb\xa7\x7b\x6e\xf5\x12\x8e\x5d\x31\x5d\x17\x02\x15\x78\xac\x54\xbb\xb0\xab\xd6\x79\x03\xf7\xbe\x59\xb5\x7e\xdf\xaa\x15\xb5\x73\xef\xdd\x39\xc2\x93\x9c\xec\xa1\x6e\x19\x2f\x6b\x1d\x91\x27\x94\x5e\x1b\xff\x69\x3b\x27\x3c\xfd\xd0\x3a\x3a\xb5\xb0\x8b\x78\xfd\xa2\x94\x19\xa7\xf8\xf8\x9c\x88\x19\x6d\x75\x3c\x95\x47\x45\xdb\xa2\x3d\xac\x2f\x60\x15\x98\x35\xde\xc3\x54\x70\x54\x50\x18\x12\xfb\x45\x85\x7b\x50\x84\xbc\x90\x35\x4a\x92\xc5\xa9\xb6\xe7\x46\xe0\x41\xa7\xee\x4c\xde\x2a\x53\x5c\x31\xb5\x02\x62\xbf\xd2\xb1\x6d\x05\x28\xed\xdd\x76\x72\x8a\x8e\xcd\xdb\x0f\x77\x8d\xae\x4d\xed\x11\x6d\x8b\xbd\xfe\xec\xec\x54\xcb\xe4\xe4\x77\x6e\x9f\x95\x57\x37\x52\x62\x91\xfa\x5d\x9f\x64\xcc\xfb\xac\x7e\x14\x3c\x11\x84\x86\x47\x1d\xbd\x1f\x8a\xb2\x30\xc4\xc7\x2c\x61\x31\xd3\x8e\x3d\x14\x51\x1b\x1e\x03\xc5\x05\xca\x59\x83\x89\xb2\x21\x33\xf5\x8b\xef\xb4\xa6\x7e\xf1\xf1\xe9\xff\x06\x00\x00\xff\xff\x44\xab\x12\x94\x8d\x2a\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6a, 0x1a, 0x17, 0xcb, 0x60, 0x53, 0x6, 0x3a, 0xc6, 0x29, 0xb2, 0xb7, 0xbe, 0x66, 0x52, 0x30, 0x66, 0xd4, 0x72, 0xbb, 0x55, 0xf0, 0x25, 0x4d, 0xcb, 0x5e, 0x45, 0x9e, 0x3a, 0x3d, 0xae, 0x41}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
