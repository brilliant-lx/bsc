// Code generated by go-bindata. DO NOT EDIT.
// sources:
// faucet.html (10.853kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x7a\xdb\x72\xe3\x38\x92\xe8\xb3\xeb\x2b\xb2\x79\x6a\x5a\xd2\x29\x93\xd4\xdd\xb2\x24\xaa\xa3\x64\xbb\x7a\x6a\x37\xb6\xa6\x62\xaa\x2a\x76\x36\x7a\x3a\x36\x40\x22\x25\xa1\x4c\x02\x6c\x00\x94\xad\x51\xe8\x7d\x5f\xf7\x0b\xf6\x17\xf7\x13\x36\x00\x5e\x44\x5d\xec\xa9\x4b\x4f\x6c\xac\x1f\x64\x02\x48\x64\x26\xf2\x8e\x24\xa7\x3f\xdc\xfe\xe9\xe6\xe3\xbf\xbd\xbf\x83\x95\x4e\xe2\xd9\x8b\xa9\xf9\x07\x31\xe1\xcb\xc0\x41\xee\xcc\x5e\x5c\x4c\x57\x48\xe8\xec\xc5\xc5\xc5\x34\x41\x4d\x20\x5a\x11\xa9\x50\x07\x4e\xa6\x17\xee\xc8\xd9\x2f\xac\xb4\x4e\x5d\xfc\x2d\x63\xeb\xc0\xf9\x8b\xfb\xe9\xb5\x7b\x23\x92\x94\x68\x16\xc6\xe8\x40\x24\xb8\x46\xae\x03\xe7\xed\x5d\x80\x74\x89\xb5\x7d\x9c\x24\x18\x38\x6b\x86\x0f\xa9\x90\xba\x06\xfa\xc0\xa8\x5e\x05\x14\xd7\x2c\x42\xd7\x0e\x2e\x81\x71\xa6\x19\x89\x5d\x15\x91\x18\x83\x8e\x33\x7b\x61\xf0\x68\xa6\x63\x9c\x6d\xb7\xde\x3b\xd4\x0f\x42\xde\xef\x76\x63\x78\x43\xb2\x08\xf5\xd4\xcf\xd7\x2c\x58\xcc\xf8\x3d\xac\x24\x2e\x02\xc7\x30\xab\xc6\xbe\x1f\x51\xfe\x59\x79\x51\x2c\x32\xba\x88\x89\x44\x2f\x12\x89\x4f\x3e\x93\x47\x3f\x66\xa1\xf2\xf5\x03\xd3\x1a\xa5\x1b\x0a\xa1\x95\x96\x24\xf5\x7b\x5e\xcf\xbb\xf2\x23\xa5\xfc\x6a\xce\x4b\x18\xf7\x22\xa5\x1c\x90\x18\x07\x8e\xd2\x9b\x18\xd5\x0a\x51\x3b\xe0\xcf\xbe\x8d\xee\x42\x70\xed\x92\x07\x54\x22\x41\xbf\xef\x5d\x79\x6d\x4b\xb2\x3e\xfd\x3c\x55\x43\x56\x45\x92\xa5\x1a\x94\x8c\xbe\x98\xee\xe7\xdf\x32\x94\x1b\xbf\xe7\x75\xbc\x4e\x31\xb0\x74\x3e\x2b\x67\x36\xf5\x73\x84\xb3\xef\xc2\xed\x72\xa1\x37\x7e\xd7\xeb\x7b\x1d\x3f\x25\xd1\x3d\x59\x22\x2d\x29\x99\x25\xaf\x9c\xfc\xdd\xe8\x3e\xa5\xc3\xcf\xc7\x2a\xfc\x3d\x88\x25\x22\x41\xae\xbd\xcf\xca\xef\x7a\x9d\x91\xd7\x2e\x27\x4e\xf1\x5b\x02\x46\x69\x86\xd4\x85\xb7\x46\xa9\x59\x44\x62\x37\x42\xae\x51\xc2\xd6\xcc\x5e\x24\x8c\xbb\x2b\x64\xcb\x95\x1e\x43\xa7\xdd\xfe\xc3\xe4\xdc\xec\x7a\x95\x4f\x53\xa6\xd2\x98\x6c\xc6\xb0\x88\xf1\x31\x9f\x22\x31\x5b\x72\x97\x69\x4c\xd4\x18\x72\xcc\x76\x61\x67\x69\xa6\x52\x2c\x25\x2a\x55\x10\x4b\x85\x62\x9a\x09\x3e\x36\x16\x45\x34\x5b\xe3\x39\x58\x95\x12\x7e\xb2\x81\x84\x4a\xc4\x99\xc6\x23\x46\xc2\x58\x44\xf7\xf9\x9c\xf5\xdf\xfa\x21\x22\x11\x0b\x39\x86\x87\x15\x2b\xb6\x81\x25\x04\xa9\xc4\x02\x3d\xa4\x84\x52\xc6\x97\x63\x18\xa6\xc5\x79\x20\x21\x72\xc9\xf8\x18\xda\xfb\x2d\x53\xbf\x14\xe3\xd4\xcf\x43\xd5\x8b\x8b\x69\x28\xe8\xc6\xcc\x50\xb6\x06\x46\x03\x47\x62\x44\x52\x1d\xad\xc8\xbf\x63\x8c\x46\x23\x46\x15\x94\xad\x2d\x70\x09\x94\x47\x1e\x3a\x17\x74\xe3\x40\x14\x13\xa5\x02\xe7\x48\x2f\x36\x6e\xe5\x3b\x0a\x00\xb3\x89\x30\x5e\x2e\x1d\xac\x49\xf1\xe0\x80\xe5\x2e\x70\x72\xce\xdd\x50\x68\x2d\x92\x31\x74\xcc\x99\x8a\x2d\x47\xf8\x62\x37\x5e\xba\x9d\xae\x33\x7b\x01\x4f\xfc\x4d\x57\x9d\x12\xad\xc6\x47\xed\x5a\x35\x57\x0a\x76\x66\x53\x56\x62\x5b\x10\x58\x10\x37\x24\x7a\xe5\x00\x91\x8c\xb8\x2b\x46\x29\xf2\xc0\xd1\x32\x43\x23\x03\x36\xfb\xb8\x62\x0a\x1e\x30\x54\x4c\x23\x3c\xb0\x38\x06\x2e\x20\x16\x7c\x89\x12\x42\x84\x84\xb0\xfc\x80\x74\x1a\x4a\x7f\x36\x25\x47\x91\x8c\x32\x15\x09\x49\xbd\xe5\xd2\x7f\xff\xe9\xe7\x9b\xe5\xa7\xe8\x9f\x9d\xd9\xfb\x18\x89\x42\x58\x33\xc5\x34\xe8\x15\x02\xc7\x87\x8a\x46\xb8\x81\x28\x66\xd1\x3d\xe3\x4b\xf8\xef\xff\xfa\xcf\xff\xf0\xa6\x3e\x99\x4d\xfd\x55\xa7\x94\x46\xae\x98\xe3\xc7\x23\xb9\x3e\x2d\xba\x11\x14\x0f\x62\xb1\x50\xa8\xdd\x6e\x09\x7b\x00\xcc\x78\x9a\x69\x77\x29\x45\x96\x56\xeb\x17\x53\x3b\x6b\x8d\x21\x93\xb1\x53\xe4\x26\xfb\xa8\x37\x69\x21\xee\xca\x36\x16\x42\x26\xae\xd1\xbf\x14\xb1\x03\x69\x4c\x22\x5c\x89\x98\xa2\x0c\x9c\xb7\x16\xcf\x46\x64\x12\xe6\xef\xe6\xf0\x21\x21\x52\xc3\xcd\x8a\x30\x0e\x84\x52\xe3\x48\x9e\xe7\xd5\xe8\x5a\xaf\x3a\xe5\xcc\x0d\x35\xdf\x43\x5d\x4c\xc3\x4c\x6b\x51\x01\x86\x9a\x43\xa8\xb9\x4b\x71\x41\xb2\x58\x03\x95\x22\xa5\xe2\x81\xbb\x5a\x2c\x97\x26\xeb\xe6\x3c\xe7\x9b\x1c\xa0\x44\x93\x62\x29\x70\x4a\xd8\xd2\x2c\x88\x4a\x45\x9a\xa5\x85\x61\xe4\x93\xf8\x98\x12\x4e\x91\x1a\x33\x8a\x15\x3a\xb3\x9f\xd9\x1a\x21\x41\x73\xa4\x8b\x63\x1b\x8b\x88\x44\xed\xd6\x51\x9e\x58\xda\xd4\xcf\x59\xc9\x0f\x54\x19\x73\x16\x97\x98\xaa\x03\x24\xc8\x33\x38\x18\xb9\xd2\xc4\xbb\x4a\x16\x00\xdb\xad\x24\x7c\x89\xf0\x92\xd1\xc7\x4b\x78\x49\x12\x91\x71\x0d\xe3\x00\xbc\xd7\xf6\x51\xed\x76\x07\x64\x00\xa6\x31\x03\x63\xbf\xcf\x78\x0e\x08\x6e\x4d\x33\x70\x34\x43\x19\x6c\xb7\x06\xfb\x6e\x37\x51\x9b\x24\x14\x71\xd0\x98\xbf\x9b\x37\x26\x2a\x0b\x13\xa6\x9b\x2d\x67\xb6\xdd\x16\x74\x77\xbb\xdc\x86\x63\x36\xdb\x6e\x91\xd3\x23\xda\x53\x3f\x8b\xf7\xba\xf6\x8d\xb2\xff\xaf\xa9\xfe\x3d\x2e\x97\x1b\xd0\xe2\x1e\xb9\xfa\x5f\x52\xfd\x5e\xe5\xb9\x3a\x2e\xe1\x65\x88\x69\x17\xdf\xf2\x85\xb0\x8a\x9f\x97\xa3\x52\xf7\x56\x70\x31\xfb\x62\xa5\x17\x6a\xde\x6e\x0b\x0a\xbb\xdd\x04\x0e\xb4\x5d\xd1\x2b\x8c\xec\x83\x96\xbb\x1d\xd4\xe0\xbf\xd5\x0c\x6a\x81\xee\x0b\xe3\xdf\x51\x5e\xd1\x22\x1d\x43\xaf\x5b\x4b\x2a\xe7\x42\xe3\xf0\x28\x34\xf6\xce\x02\xa7\x84\x63\x0c\xf6\xd7\x55\x09\x89\xcb\xe7\xc2\xd8\x6a\x61\xeb\x78\x93\x1b\xda\xdc\x59\xb0\x56\xe5\xef\xf6\x04\xc4\x1a\xe5\x22\x16\x0f\x63\x20\x99\x16\x13\x48\xc8\x63\x55\xc3\xf4\xda\xed\x3a\xdf\xa6\xa0\x27\x61\x8c\x45\xe2\xfe\x2d\x43\xa5\x55\x15\x74\xf3\x25\xfb\x6b\x62\x2f\x45\xae\x90\x1e\x49\xc3\x50\x34\x76\x67\xa1\x6a\x12\xdf\xcb\xf8\x1c\xef\x0b\x21\xaa\x0c\x5f\x67\xa3\x40\x5d\xab\x60\x9c\xd9\x54\xcb\x3d\xdc\xc5\x54\xd3\xaf\xca\xc7\xd2\x94\xed\x4f\x78\x0a\xe4\x01\xc1\x9c\x3d\x45\x94\x79\xcd\x68\x2c\x05\xec\x70\xea\x6b\xfa\x1d\x94\x4d\x20\x08\x89\xc2\x2f\x21\x6f\xab\xb7\x3d\x79\x3b\xfc\x5e\xfa\x2b\x24\x52\x87\x48\xf4\x97\x30\xb0\xc8\x38\xad\x9d\x7f\xfe\x6e\xfe\xbd\xe4\x33\xce\xd6\x28\x15\xd3\x9b\x2f\xa5\x8f\x74\xcf\x40\x3e\x3e\x64\x61\xea\x6b\xf9\xbc\xa5\xfd\x03\x5c\xfb\xa9\x7a\xb1\x20\xb8\xea\xcd\xfe\x28\x1e\x80\x0a\x54\xa0\x6d\x75\x27\xe4\xfd\x4f\x53\x7f\xd5\xab\x40\xd2\xd3\x42\x4e\xa3\xd2\x1c\xb5\x17\xaa\x48\x45\x84\xe7\x17\x9b\xbc\x56\xf1\xdb\x8f\xc3\x08\x47\xf4\x75\x77\x74\xd7\x5d\x8c\x86\xfd\x7e\xb7\x3d\xea\xb7\xa3\x37\x57\xfd\xfe\x55\x1f\xdf\x2c\x06\x8b\xdb\x51\xfb\x6e\x38\x98\x8f\x9c\xd9\xfc\xe3\x8d\x89\x82\x97\x5f\x49\x80\x0e\x87\xd1\x70\xde\x7f\xd3\x0e\x71\x74\x73\x37\x08\x7b\xd7\xb7\x83\xee\x5d\xfb\x0d\xed\xf4\xfa\xfd\xa8\x37\xba\xbe\xee\x5e\xcf\x7b\x57\x23\x67\x76\xf7\xf1\x8f\xdf\x42\x80\x8c\x7a\x83\xab\x41\xff\xba\x7d\x7b\x45\x17\xfd\xbb\xee\x9b\xfe\x55\x78\x75\xdb\x1b\xe1\xa2\x37\xe8\x90\xee\x55\xb7\x1b\xbd\xee\x0f\xc2\x6b\x67\xf6\x97\x3f\xbf\xff\x16\x02\x48\xbb\xfd\x45\xd4\x1b\xd2\x01\x62\xb7\xd3\x41\xd2\x1d\x90\x51\xbb\xdb\xbb\x5e\x84\xa3\xa8\x1f\x2d\xe8\xa8\xbd\xe8\x74\x11\x9d\xd9\xfc\xd3\x87\xdb\x6f\xa1\xd0\xeb\x5d\x0d\x3b\x6d\xda\xbd\x8a\x86\xa3\xee\x5d\xaf\x7f\x75\x73\x1d\xdd\x0e\xdb\xf3\xdb\x7e\xd8\x0b\x3b\xed\xab\x9b\x6b\xda\xeb\xd3\x5b\xea\xcc\x3e\x7d\xb8\xfd\xf8\x2d\x14\x86\xfd\x41\xbf\x7f\x3d\xbc\x46\x7a\x75\x37\x5f\x0c\x16\xed\x51\x6f\x78\x75\xdd\xed\xf5\x7a\xdd\x41\x6f\x30\xbc\x0b\xef\xae\x7a\xa3\xeb\x5e\xdb\x52\xf8\x26\x3d\xdf\xdd\x0c\xe8\x4d\x38\xb8\x0d\x17\xfd\x79\xa7\xd3\xbf\xb9\xa6\xed\x37\xc3\xc1\x3c\xba\x79\x1d\xf6\xaf\xef\x6e\x06\xfd\x37\xc3\xd7\xed\xd1\xf0\xca\x99\xdd\xbe\x7e\x6b\x08\x00\x91\x08\x4c\xa9\x0c\x29\x10\x05\xf3\xbb\xf7\xdd\x76\x5e\x88\x78\x53\x3f\xad\x59\x34\xdc\x98\x2c\x0e\x5a\xc0\x12\x35\x50\xd4\x84\xc5\x40\x42\x91\x69\x38\xe1\x71\xc9\xf4\x2a\x0b\x2d\x6b\x21\x0f\xdd\xc8\x54\xe6\xfe\xfc\xee\xbd\xf2\xc3\x58\x84\x7e\x42\x94\x46\xe9\x5b\x5a\x5e\x42\x9d\x99\x7d\x32\xdc\xe4\x34\x6b\x44\x3f\x64\x69\x2a\xa4\x86\xdb\xfc\x1e\x34\x3e\xa4\x75\x78\x41\x0a\x79\x68\x29\x39\x33\x38\x33\x0b\xf6\xb4\xb5\x33\x6d\xb7\x6c\x01\xde\x9f\xcb\xab\xeb\x6e\x37\xc5\x64\xf6\x71\x85\xb0\xb0\xbd\x2d\x60\x0a\x64\xc6\xb9\xb9\x47\x49\xbc\xc9\x81\x20\x95\x42\x63\x64\xae\xe5\x40\x96\x84\x71\xa5\x21\x14\x5a\x79\x53\x1f\x93\x83\xaa\xe4\x7c\x30\xaa\x9e\xaa\xeb\x71\xd9\x07\xb1\xcb\xbe\x0f\x3f\xc7\x22\x24\x31\xac\x4d\xfc\x0c\x63\x13\x62\x04\x98\x6b\x8f\xbd\xe7\x45\x99\x94\xc8\x35\x28\x4d\x74\xa6\x40\x2c\xec\x6c\xce\xaf\xd9\xbf\x26\x12\x88\xd6\x98\xa4\x1a\x82\xe2\x16\x6f\xe6\x14\xca\x75\xd1\x9b\x30\x43\x53\x7d\x1f\xae\xe7\x95\x99\xe3\x54\x33\x65\x61\x00\x01\xfc\xf2\x6b\x35\x5b\x88\x6a\xf2\xa2\x60\xf6\x16\x17\x8c\x23\x10\x13\xbb\x73\xa1\xe8\x15\xd1\x10\x49\x24\x1a\x15\x44\xb1\x50\x99\xcc\xcf\x60\x6a\x4e\x30\xe7\x28\x31\x97\x38\xcd\x42\x6a\xf9\x29\x91\x34\x57\x44\xad\x5a\x45\x9b\x42\xa2\xce\x24\xdf\xaf\x95\xf3\x17\x0b\x21\xa1\x69\x10\xb0\xa0\x3d\x01\x36\x2d\xf1\x7a\x31\xf2\xa5\x5e\x4d\x80\xbd\x7a\x55\x01\x5f\xb0\x05\x34\x4b\x88\x5f\xd8\xaf\x9e\x7e\xf4\x0c\x15\x08\x02\xa8\x53\xb3\x04\x0b\x3c\x2a\x8d\x59\x84\x4d\x76\x09\x9d\xd6\xa4\x5c\x0d\x25\x92\xfb\x72\x54\x68\x3a\xff\x67\x7f\x77\xb9\x68\xa8\x88\x32\xdb\x98\x5a\xa2\xbe\xcb\x3b\x22\xf3\xcd\x5b\xda\x3c\xe8\x81\xb4\x3c\x9b\x88\xbc\xa2\x9f\x03\x01\x38\x5c\x70\x74\x72\x14\xb9\x12\x0a\x81\xdf\x90\x38\x0e\x49\x74\x5f\x17\x52\xc9\xf2\xaa\x80\xf1\x24\x72\x8a\xb2\xd9\x38\x69\xc6\x34\x2e\xcb\xd3\x35\x14\xd3\x78\x8f\x9b\x06\x8c\xa1\xb1\xdd\xd6\x8d\xbf\x71\x59\x80\x44\x05\x2d\x03\x43\x94\x62\x4b\x5e\x52\xcf\x21\x76\xb9\x30\x76\x7b\x36\x0f\xa1\xea\x3c\x2e\x0b\xf4\x25\xaf\xdf\x2a\x97\xbc\x56\x9a\x3c\x8f\xe3\xb4\x09\xf5\xb4\x84\x0d\xa2\x02\x1a\x02\x58\x56\x76\x9d\x1f\xec\xc0\xb8\xad\x87\x1d\x98\x77\x7e\x67\x51\x40\x60\xc9\x94\x86\x4c\xc6\xc6\xc0\x0d\x5c\xee\x67\x95\x57\x59\xb8\x73\x3a\xcb\xe1\x3c\x85\x9c\x36\xff\xe9\xc3\x9f\xde\x79\x4a\x4b\xc6\x97\x6c\xb1\x69\x6e\x33\x19\x8f\xe1\x65\xd3\xf9\x7f\x99\x8c\x9d\xd6\x2f\xed\x5f\xbd\x35\x89\x33\xbc\x2c\x9c\x74\x0c\xe5\xf5\xcc\x78\xf1\xd8\xfe\x9e\x44\xb2\xcb\xd2\x53\xc7\xe5\x43\x11\x9a\x76\xad\xd6\xe4\x04\xfa\xd8\x8c\x14\xea\xa6\x01\xab\x82\xd9\xb1\x48\x08\x24\xa8\x57\x82\x9a\x63\x4b\x8c\x04\xe7\x18\x69\xc8\x52\xc1\x0b\x09\x40\x2c\x94\xaa\x59\x71\x01\xf1\xa4\x24\x20\xb0\x2d\xac\x7f\xc5\xf0\x83\x88\xee\x51\x37\x9b\xcd\x07\xc6\xa9\x78\xf0\x62\x11\x11\xb3\xc1\x33\x81\x57\x44\x22\x86\x20\x08\xa0\x48\x34\x4e\x0b\x7e\x02\xe7\x41\x99\x94\xe3\xc0\xd8\x3c\x9a\xa7\x16\xbc\x82\xe3\xed\x2b\xa1\x34\xbc\x02\xc7\xcf\x83\xa5\xb9\x78\x49\xed\x93\x94\x39\xad\xdc\x90\x4b\x9d\x08\x9e\xa0\x52\x64\x89\x75\x6e\x71\x8d\x5c\x57\x31\xc2\x1c\x2a\x51\x4b\x08\xc0\xea\x2e\x25\x52\x61\x0e\xe2\x99\x0b\x40\x19\x2c\x4c\xc8\xb1\x60\x41\x00\x3c\x8b\xe3\x7d\x8c\xc9\x63\xda\xa4\x8c\x1e\x07\xe0\x9e\x2d\xcb\xe1\x87\x20\x00\x53\x0f\x1b\x79\xd3\xfd\x4e\x63\x17\x79\xdd\xde\xf2\x4c\x49\xbe\xdf\xd1\x9a\xd4\x83\xd1\x01\x36\xa4\x7f\x0f\x1d\xd2\x63\x7c\x48\x9f\x40\x68\xaf\x49\xcf\xe1\xcb\xaf\x55\x35\x74\x76\xe2\x09\x6c\x3c\x4b\x42\x94\xcf\xa1\xcb\x5d\xbf\x40\x67\x45\xfd\x96\xeb\xda\xde\x4b\xe8\x0c\x5b\x4f\x60\x47\x29\xc5\x93\xc8\xb9\xd0\x9b\xe6\x36\x26\x1b\x91\xe9\x31\x34\xb4\x48\x6f\xec\xbd\xa6\x71\x09\x86\xd6\x18\x2a\x0c\x97\xb6\xdd\x33\x86\x86\x1d\x99\x75\x96\xa0\xdd\x35\x68\xb7\xdb\x97\x50\x36\xef\xe7\xc4\xf8\xa3\xcc\x70\xf7\x04\x3f\x2a\x8b\x22\x54\x4f\x4a\xef\x8b\x38\x2a\x70\x54\x3c\x15\xe3\xef\xe0\xaa\x4a\xf5\x07\x6c\xc1\x8f\x3f\xc2\xc9\xea\xa1\x19\xfb\x3e\xfc\x0b\x91\xf7\x60\x5b\x18\x12\xd7\x4c\x64\x6a\x5f\x38\x24\x4c\x29\x53\x3b\x11\x05\x54\x70\x2c\xf6\x7c\x5d\xd6\x3e\xe1\xb1\x00\x83\x19\xb4\x8f\x19\x34\x91\xb2\x96\xd5\xcf\x24\xfb\x1a\xde\xc3\x3c\x7e\xb1\xab\xd3\x3b\xd8\xc9\x12\x84\x1f\x02\x70\x9c\xfa\xe6\x13\x08\x03\x50\x21\xbb\x50\xa8\x3f\xe6\xba\x68\x16\xc5\xcd\xb9\xd2\xa3\x75\x09\xbd\x76\xbb\xdd\x3a\x61\x62\xb7\x17\xef\xeb\x34\x45\x4e\x81\xf0\x8d\x8d\x8f\x95\x6c\x19\xd7\x02\x44\x66\xe2\x6c\x44\x62\x88\x44\x1c\xe7\x45\x69\xb1\xd5\xd6\x6a\x22\x49\x04\x87\x00\xdc\xce\xe4\x4c\x11\x54\x93\x64\xed\x68\xc7\xea\x39\x23\xfb\x63\x15\x1d\xca\xec\x08\xd8\xed\x1c\x28\xe5\x40\x5f\xe7\x15\x73\x51\xf1\xcd\xf6\x12\x3d\x52\xd7\x5e\x5f\xc7\x32\xab\xf1\x9f\xe3\x79\xd5\xf9\xc2\x63\x54\xcb\x69\xa6\x56\xcd\x23\x46\x5b\x93\x53\xdd\xbc\xd5\x28\x89\x46\xdb\x7a\xb3\xba\x40\xae\x99\xc4\x13\x95\x00\xe1\xa6\xe8\x75\xf3\xf2\xac\x2c\x27\xa8\x71\x0d\xdb\xd6\x38\x50\x99\x7d\x37\x7f\x60\x4e\x5f\xe9\x30\xb6\xa2\x16\x1c\x01\x00\x8e\x9c\xc0\x1a\xea\x81\xa5\x1a\x60\x8c\x49\xaa\x90\x42\x00\xf9\xbb\xd4\x66\xcb\xcb\x38\x7b\x6c\xb6\xdc\x62\x7c\x8c\xa3\x5c\x9f\x94\xd7\xb4\x8b\x92\xed\x57\x01\x38\x53\x2d\x81\xd1\xa0\xe1\xc0\xab\x73\x2e\x68\x52\x70\x63\xb6\xe7\xa0\xbe\x15\x60\xaa\xe9\xcc\x36\x5f\xf2\x0e\xcd\x5f\x1d\x53\x4f\x2e\xa5\xc8\x38\x1d\x9b\x32\xab\x79\x82\x96\xac\x89\x26\xd2\x62\x6d\x4d\x60\x0f\xee\x2a\xf6\x37\x1c\x43\x64\x94\x33\x81\xbc\xb7\x68\x7b\x3c\x50\x75\x45\xed\x28\x14\x92\xa2\x74\x25\xa1\x2c\x53\x63\xe8\xa7\x8f\x93\xbf\x96\xef\x2e\x6d\x27\xea\x59\x56\x53\x89\xb3\x13\x8e\xa2\xc8\xbe\x2a\x79\x05\xce\xd4\x37\x00\x7f\x0f\x4d\x75\xd8\xfa\x3b\x5c\x38\xd3\x6f\x83\xea\x65\x69\x31\x9f\x30\x4a\x63\x34\x0c\xef\xd1\x1b\x67\x34\xfa\xaf\xbb\xd4\x21\x49\x28\x1a\x6d\xfb\x3d\x3b\xc0\x58\xe1\x33\x1b\xaa\x9e\x5d\xc3\x18\x80\x6b\x8e\xcc\xac\xcc\x8b\x2e\x99\x9d\x96\x0d\x2b\x8b\xe2\x8d\x3c\xcd\xa4\x2d\xbc\x9a\x6e\x61\x60\x97\xd0\x50\xa6\x10\xa4\xaa\xd1\xf2\x56\x59\x42\x38\xfb\x1b\x36\x4d\x5e\x6a\xe5\xb2\xb2\x4d\x40\xe7\x34\x24\x9f\x30\xb3\xef\xce\x35\xca\x1c\xd7\x28\x84\xd8\x28\xb5\x6b\x14\x59\x7b\x9b\xdd\xf8\x4a\x09\x9d\xa7\xe2\x86\x44\x42\x7d\xe0\x96\xc9\x17\xa4\x30\xd4\xcb\xb5\x90\xc8\x46\xde\x00\xb5\xa5\x3b\x17\x0f\x41\xa3\xd7\xae\x98\xcc\x15\x6d\xf5\xdc\x28\x6c\xed\x44\x19\x86\xcb\xd2\x35\x67\xd0\x6b\xff\x1e\xdc\x52\x62\xdf\x3a\x1f\x9e\x40\x4b\x96\x22\x05\x12\x69\xb6\xc6\x7f\xc0\x41\x7e\x07\x21\x7f\x35\x8b\xc6\x0e\x4b\xe1\x59\x33\x3d\xe0\xd7\xac\x56\xb2\xfd\xff\xc6\xdf\xc0\xb7\x12\x7e\x05\xce\xd9\x83\x3c\x69\x89\x47\x80\x47\xae\xfd\xb4\xdf\xdb\xae\xb6\x73\x9c\x53\x4c\xb5\x5b\xbd\x8f\x69\x79\x2b\x9d\xc4\x4d\x67\xaa\xed\xb7\x16\x86\xe7\x0a\x83\x45\x90\x4f\x1f\x96\x74\xbb\xc3\x8b\x4c\x14\x0b\x85\x47\x97\x2e\xa8\x15\x27\xd5\xc5\xac\xac\x44\x60\xb7\xff\x24\xc5\xf7\xe1\x83\x26\x52\x03\x81\x4f\x6f\x21\x4b\x29\xd1\x26\x7b\x09\x30\xf9\xd1\x66\xb1\xea\x9b\x95\x90\x48\x05\x0b\x21\x1f\x88\xa4\x90\x71\xcd\x62\xb3\xbe\xb1\x9d\xc5\xb2\xf4\x53\xa8\xdf\x9a\x28\xb6\x26\x71\xf3\xe4\x12\xf8\xb2\xd9\xf0\xea\x2a\x6f\xb4\x3c\x24\xd1\xea\x14\xd0\x66\xac\x8a\x6e\x00\xef\xec\x15\xa0\xf9\xb2\xa9\x57\x4c\xb5\x3c\xa2\xb5\x6c\x36\x0e\x8c\xa1\xd1\x32\x7a\xed\xd4\xae\x64\xd5\xf6\xe9\x81\x5b\x3d\x87\x63\x5f\x4c\x57\x85\x40\x09\x1e\x29\xd5\xcc\xed\xaa\x71\x59\xc3\x7d\x68\x56\x8d\x3f\x34\x2a\x45\xed\xdd\x7b\x7f\x8e\xe0\x2c\x27\x07\xa8\x1b\xc6\xcb\x1a\x27\xe4\x09\xa5\x37\xc6\x7f\x9a\xce\x19\x4f\x3f\xb6\x8e\x56\x25\xec\x3c\x5e\x3f\x2b\x65\xc6\x29\x3e\x3e\x25\x62\x46\x1b\x2d\x4f\x65\x61\xde\xb6\x68\x0e\xaa\x0b\x58\x09\x66\x8d\xf7\x38\x15\x9c\x14\x14\x86\xc4\x61\x51\xe1\x1e\x15\x21\xcf\x64\x8d\x82\x64\x7e\xaa\xdd\xa5\x11\x78\xbb\x55\x75\x26\xef\x94\x29\xae\x98\x5a\x01\xb1\x5f\xc6\xd8\xb6\x02\x14\xf6\x6e\x3b\x39\x79\xc7\xe6\xf5\xfb\xb7\xb5\xae\x4d\xe5\x11\x4d\x8b\xbd\xfa\x9c\xec\x5c\xcb\xe4\xec\xf7\x6b\x9f\x95\x57\x35\x52\x22\x91\xf8\x1d\x9f\xa4\xcc\xfb\xac\x7e\x12\x3c\x16\x84\x06\x27\x1d\xbd\x1f\xf3\xb2\x30\xc0\xc7\x34\x66\x11\xd3\x8e\x3d\x14\x51\x1b\x1e\x01\xc5\x05\xca\x59\x8d\x89\xa2\x21\x33\xf5\xf3\xef\xaf\xa6\x7e\xfe\x51\xe9\xff\x04\x00\x00\xff\xff\xb8\xd1\xc6\x06\x65\x2a\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0x2d, 0xdf, 0x3b, 0x19, 0x96, 0x92, 0x5, 0xb9, 0xc1, 0x17, 0x66, 0x30, 0x14, 0x56, 0x2, 0x7b, 0x35, 0xd0, 0x5a, 0x50, 0x1, 0x85, 0xe0, 0x87, 0x8a, 0xd6, 0x91, 0xe5, 0xc9, 0xeb, 0x3a}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
