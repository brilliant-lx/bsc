// Code generated by go-bindata. DO NOT EDIT.
// sources:
// faucet.html (10.853kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x7a\xdb\x72\xe3\x38\x92\xe8\xb3\xeb\x2b\xb2\x79\x6a\x5a\xd2\x29\x93\xd4\xdd\xb2\x24\xaa\xa3\x64\xbb\x7a\x6a\x37\xb6\xa6\x62\xaa\x2a\x76\x36\x7a\x3a\x36\x40\x22\x25\xa1\x4c\x02\x6c\x00\x94\xad\x51\xe8\x7d\x5f\xf7\x0b\xf6\x17\xf7\x13\x36\x00\x5e\x44\x5d\xec\xa9\x4b\x4f\x6c\xac\x1f\x64\x02\x48\x64\x26\xf2\x8e\x24\xa7\x3f\xdc\xfe\xe9\xe6\xe3\xbf\xbd\xbf\x83\x95\x4e\xe2\xd9\x8b\xa9\xf9\x07\x31\xe1\xcb\xc0\x41\xee\xcc\x5e\x5c\x4c\x57\x48\xe8\xec\xc5\xc5\xc5\x34\x41\x4d\x20\x5a\x11\xa9\x50\x07\x4e\xa6\x17\xee\xc8\xd9\x2f\xac\xb4\x4e\x5d\xfc\x2d\x63\xeb\xc0\xf9\x8b\xfb\xe9\xb5\x7b\x23\x92\x94\x68\x16\xc6\xe8\x40\x24\xb8\x46\xae\x03\xe7\xed\x5d\x80\x74\x89\xb5\x7d\x9c\x24\x18\x38\x6b\x86\x0f\xa9\x90\xba\x06\xfa\xc0\xa8\x5e\x05\x14\xd7\x2c\x42\xd7\x0e\x2e\x81\x71\xa6\x19\x89\x5d\x15\x91\x18\x83\x8e\x33\x7b\x61\xf0\x68\xa6\x63\x9c\x6d\xb7\xde\x3b\xd4\x0f\x42\xde\xef\x76\x63\x78\x43\xb2\x08\xf5\xd4\xcf\xd7\x2c\x58\xcc\xf8\x3d\xac\x24\x2e\x02\xc7\x30\xab\xc6\xbe\x1f\x51\xfe\x59\x79\x51\x2c\x32\xba\x88\x89\x44\x2f\x12\x89\x4f\x3e\x93\x47\x3f\x66\xa1\xf2\xf5\x03\xd3\x1a\xa5\x1b\x0a\xa1\x95\x96\x24\xf5\x7b\x5e\xcf\xbb\xf2\x23\xa5\xfc\x6a\xce\x4b\x18\xf7\x22\xa5\x1c\x90\x18\x07\x8e\xd2\x9b\x18\xd5\x0a\x51\x3b\xe0\xcf\xbe\x8d\xee\x42\x70\xed\x92\x07\x54\x22\x41\xbf\xef\x5d\x79\x6d\x4b\xb2\x3e\xfd\x3c\x55\x43\x56\x45\x92\xa5\x1a\x94\x8c\xbe\x98\xee\xe7\xdf\x32\x94\x1b\xbf\xe7\x75\xbc\x4e\x31\xb0\x74\x3e\x2b\x67\x36\xf5\x73\x84\xb3\xef\xc2\xed\x72\xa1\x37\x7e\xd7\xeb\x7b\x1d\x3f\x25\xd1\x3d\x59\x22\x2d\x29\x99\x25\xaf\x9c\xfc\xdd\xe8\x3e\xa5\xc3\xcf\xc7\x2a\xfc\x3d\x88\x25\x22\x41\xae\xbd\xcf\xca\xef\x7a\x9d\x91\xd7\x2e\x27\x4e\xf1\x5b\x02\x46\x69\x86\xd4\x85\xb7\x46\xa9\x59\x44\x62\x37\x42\xae\x51\xc2\xd6\xcc\x5e\x24\x8c\xbb\x2b\x64\xcb\x95\x1e\x43\xa7\xdd\xfe\xc3\xe4\xdc\xec\x7a\x95\x4f\x53\xa6\xd2\x98\x6c\xc6\xb0\x88\xf1\x31\x9f\x22\x31\x5b\x72\x97\x69\x4c\xd4\x18\x72\xcc\x76\x61\x67\x69\xa6\x52\x2c\x25\x2a\x55\x10\x4b\x85\x62\x9a\x09\x3e\x36\x16\x45\x34\x5b\xe3\x39\x58\x95\x12\x7e\xb2\x81\x84\x4a\xc4\x99\xc6\x23\x46\xc2\x58\x44\xf7\xf9\x9c\xf5\xdf\xfa\x21\x22\x11\x0b\x39\x86\x87\x15\x2b\xb6\x81\x25\x04\xa9\xc4\x02\x3d\xa4\x84\x52\xc6\x97\x63\x18\xa6\xc5\x79\x20\x21\x72\xc9\xf8\x18\xda\xfb\x2d\x53\xbf\x14\xe3\xd4\xcf\x43\xd5\x8b\x8b\x69\x28\xe8\xc6\xcc\x50\xb6\x06\x46\x03\x47\x62\x44\x52\x1d\xad\xc8\xbf\x63\x8c\x46\x23\x46\x15\x94\xad\x2d\x70\x09\x94\x47\x1e\x3a\x17\x74\xe3\x40\x14\x13\xa5\x02\xe7\x48\x2f\x36\x6e\xe5\x3b\x0a\x00\xb3\x89\x30\x5e\x2e\x1d\xac\x49\xf1\xe0\x80\xe5\x2e\x70\x72\xce\xdd\x50\x68\x2d\x92\x31\x74\xcc\x99\x8a\x2d\x47\xf8\x62\x37\x5e\xba\x9d\xae\x33\x7b\x01\x4f\xfc\x4d\x57\x9d\x12\xad\xc6\x47\xed\x5a\x35\x57\x0a\x76\x66\x53\x56\x62\x5b\x10\x58\x10\x37\x24\x7a\xe5\x00\x91\x8c\xb8\x2b\x46\x29\xf2\xc0\xd1\x32\x43\x23\x03\x36\xfb\xb8\x62\x0a\x1e\x30\x54\x4c\x23\x3c\xb0\x38\x06\x2e\x20\x16\x7c\x89\x12\x42\x84\x84\xb0\xfc\x80\x74\x1a\x4a\x7f\x36\x25\x47\x91\x8c\x32\x15\x09\x49\xbd\xe5\xd2\x7f\xff\xe9\xe7\x9b\xe5\xa7\xe8\x9f\x9d\xd9\xfb\x18\x89\x42\x58\x33\xc5\x34\xe8\x15\x02\xc7\x07\x58\xa3\x54\x4c\x70\x08\x37\x10\xc5\x2c\xba\x67\x7c\x09\xff\xfd\x5f\xff\xf9\x1f\xde\xd4\x27\xb3\xa9\xbf\xea\x94\xd2\xc8\x15\x73\xfc\x78\x24\xd7\xa7\x45\x37\x82\xe2\x41\x2c\x16\x0a\xb5\xdb\x2d\x61\x0f\x80\x19\x4f\x33\xed\x2e\xa5\xc8\xd2\x6a\xfd\x62\x6a\x67\xad\x31\x64\x32\x76\x8a\xdc\x64\x1f\xf5\x26\x2d\xc4\x5d\xd9\xc6\x42\xc8\xc4\x35\xfa\x97\x22\x76\x20\x8d\x49\x84\x2b\x11\x53\x94\x81\xf3\xd6\xe2\xd9\x88\x4c\xc2\xfc\xdd\x1c\x3e\x24\x44\x6a\xb8\x59\x11\xc6\x81\x50\x6a\x1c\xc9\xf3\xbc\x1a\x5d\xeb\x55\xa7\x9c\xb9\xa1\xe6\x7b\xa8\x8b\x69\x98\x69\x2d\x2a\xc0\x50\x73\x08\x35\x77\x29\x2e\x48\x16\x6b\xa0\x52\xa4\x54\x3c\x70\x57\x8b\xe5\xd2\x64\xdd\x9c\xe7\x7c\x93\x03\x94\x68\x52\x2c\x05\x4e\x09\x5b\x9a\x05\x51\xa9\x48\xb3\xb4\x30\x8c\x7c\x12\x1f\x53\xc2\x29\x52\x63\x46\xb1\x42\x67\xf6\x33\x5b\x23\x24\x68\x8e\x74\x71\x6c\x63\x11\x91\xa8\xdd\x3a\xca\x13\x4b\x9b\xfa\x39\x2b\xf9\x81\x2a\x63\xce\xe2\x12\x53\x75\x80\x04\x79\x06\x07\x23\x57\x9a\x78\x57\xc9\x02\x60\xbb\x95\x84\x2f\x11\x5e\x32\xfa\x78\x09\x2f\x49\x22\x32\xae\x61\x1c\x80\xf7\xda\x3e\xaa\xdd\xee\x80\x0c\xc0\x34\x66\x60\xec\xf7\x19\xcf\x01\xc1\xad\x69\x06\x8e\x66\x28\x83\xed\xd6\x60\xdf\xed\x26\x6a\x93\x84\x22\x0e\x1a\xf3\x77\xf3\xc6\x44\x65\x61\xc2\x74\xb3\xe5\xcc\xb6\xdb\x82\xee\x6e\x97\xdb\x70\xcc\x66\xdb\x2d\x72\x7a\x44\x7b\xea\x67\xf1\x5e\xd7\xbe\x51\xf6\xff\x35\xd5\xbf\xc7\xe5\x72\x03\x5a\xdc\x23\x57\xff\x4b\xaa\xdf\xab\x3c\x57\xc7\x25\xbc\x0c\x31\xed\xe2\x5b\xbe\x10\x56\xf1\xf3\x72\x54\xea\xde\x0a\x2e\x66\x5f\xac\xf4\x42\xcd\xdb\x6d\x41\x61\xb7\x9b\xc0\x81\xb6\x2b\x7a\x85\x91\x7d\xd0\x72\xb7\x83\x1a\xfc\xb7\x9a\x41\x2d\xd0\x7d\x61\xfc\x3b\xca\x2b\x5a\xa4\x63\xe8\x75\x6b\x49\xe5\x5c\x68\x1c\x1e\x85\xc6\xde\x59\xe0\x94\x70\x8c\xc1\xfe\xba\x2a\x21\x71\xf9\x5c\x18\x5b\x2d\x6c\x1d\x6f\x72\x43\x9b\x3b\x0b\xd6\xaa\xfc\xdd\x9e\x80\x58\xa3\x5c\xc4\xe2\x61\x0c\x24\xd3\x62\x02\x09\x79\xac\x6a\x98\x5e\xbb\x5d\xe7\xdb\x14\xf4\x24\x8c\xb1\x48\xdc\xbf\x65\xa8\xb4\xaa\x82\x6e\xbe\x64\x7f\x4d\xec\xa5\xc8\x15\xd2\x23\x69\x18\x8a\xc6\xee\x2c\x54\x4d\xe2\x7b\x19\x9f\xe3\x7d\x21\x44\x95\xe1\xeb\x6c\x14\xa8\x6b\x15\x8c\x33\x9b\x6a\xb9\x87\xbb\x98\x6a\xfa\x55\xf9\x58\x9a\xb2\xfd\x09\x4f\x81\x3c\x20\x98\xb3\xa7\x88\x32\xaf\x19\x8d\xa5\x80\x1d\x4e\x7d\x4d\xbf\x83\xb2\x09\x04\x21\x51\xf8\x25\xe4\x6d\xf5\xb6\x27\x6f\x87\xdf\x4b\x7f\x85\x44\xea\x10\x89\xfe\x12\x06\x16\x19\xa7\xb5\xf3\xcf\xdf\xcd\xbf\x97\x7c\xc6\x99\xad\x42\xf4\xe6\x4b\xe9\x23\xdd\x33\x90\x8f\x0f\x59\x98\xfa\x5a\x3e\x6f\x69\xff\x00\xd7\x7e\xaa\x5e\x2c\x08\xae\x7a\xb3\x3f\x8a\x07\xa0\x02\x15\x68\x5b\xdd\x09\x79\xff\xd3\xd4\x5f\xf5\x2a\x90\xf4\xb4\x90\xd3\xa8\x34\x47\xed\x85\x2a\x52\x11\xe1\xf9\xc5\x26\xaf\x55\xfc\xf6\xe3\x30\xc2\x11\x7d\xdd\x1d\xdd\x75\x17\xa3\x61\xbf\xdf\x6d\x8f\xfa\xed\xe8\xcd\x55\xbf\x7f\xd5\xc7\x37\x8b\xc1\xe2\x76\xd4\xbe\x1b\x0e\xe6\x23\x67\x36\xff\x78\x63\xa2\xe0\xe5\x57\x12\xa0\xc3\x61\x34\x9c\xf7\xdf\xb4\x43\x1c\xdd\xdc\x0d\xc2\xde\xf5\xed\xa0\x7b\xd7\x7e\x43\x3b\xbd\x7e\x3f\xea\x8d\xae\xaf\xbb\xd7\xf3\xde\xd5\xc8\x99\xdd\x7d\xfc\xe3\xb7\x10\x20\xa3\xde\xe0\x6a\xd0\xbf\x6e\xdf\x5e\xd1\x45\xff\xae\xfb\xa6\x7f\x15\x5e\xdd\xf6\x46\xb8\xe8\x0d\x3a\xa4\x7b\xd5\xed\x46\xaf\xfb\x83\xf0\xda\x99\xfd\xe5\xcf\xef\xbf\x85\x00\xd2\x6e\x7f\x11\xf5\x86\x74\x80\xd8\xed\x74\x90\x74\x07\x64\xd4\xee\xf6\xae\x17\xe1\x28\xea\x47\x0b\x3a\x6a\x2f\x3a\x5d\x44\x67\x36\xff\xf4\xe1\xf6\x5b\x28\xf4\x7a\x57\xc3\x4e\x9b\x76\xaf\xa2\xe1\xa8\x7b\xd7\xeb\x5f\xdd\x5c\x47\xb7\xc3\xf6\xfc\xb6\x1f\xf6\xc2\x4e\xfb\xea\xe6\x9a\xf6\xfa\xf4\x96\x3a\xb3\x4f\x1f\x6e\x3f\x7e\x0b\x85\x61\x7f\xd0\xef\x5f\x0f\xaf\x91\x5e\xdd\xcd\x17\x83\x45\x7b\xd4\x1b\x5e\x5d\x77\x7b\xbd\x5e\x77\xd0\x1b\x0c\xef\xc2\xbb\xab\xde\xe8\xba\xd7\xb6\x14\xbe\x49\xcf\x77\x37\x03\x7a\x13\x0e\x6e\xc3\x45\x7f\xde\xe9\xf4\x6f\xae\x69\xfb\xcd\x70\x30\x8f\x6e\x5e\x87\xfd\xeb\xbb\x9b\x41\xff\xcd\xf0\x75\x7b\x34\xbc\x72\x66\xb7\xaf\xdf\x1a\x02\x40\x24\x02\x53\x2a\x43\x0a\x44\xc1\xfc\xee\x7d\xb7\x9d\x17\x22\xde\xd4\x4f\x6b\x16\x0d\x37\x26\x8b\x83\x16\xb0\x44\x0d\x14\x35\x61\x31\x90\x50\x64\x1a\x4e\x78\x5c\x32\xbd\xca\x42\xcb\x5a\xc8\x43\x37\x32\x95\xb9\x3f\xbf\x7b\xaf\xfc\x30\x16\xa1\x9f\x10\xa5\x51\xfa\x96\x96\x97\x50\x67\x66\x9f\x0c\x37\x39\xcd\x1a\xd1\x0f\x59\x9a\x0a\xa9\xe1\x36\xbf\x07\x8d\x0f\x69\x1d\x5e\x90\x42\x1e\x5a\x4a\xce\x0c\xce\xcc\x82\x3d\x6d\xed\x4c\xdb\x2d\x5b\x80\xf7\xe7\xf2\xea\xba\xdb\x4d\x31\x99\x7d\x5c\x21\x2c\x6c\x6f\x0b\x98\x02\x99\x71\x6e\xee\x51\x12\x6f\x72\x20\x48\xa5\xd0\x18\x99\x6b\x39\x90\x25\x61\x5c\x69\x08\x85\x56\xde\xd4\xc7\xe4\xa0\x2a\x39\x1f\x8c\xaa\xa7\xea\x7a\x5c\xf6\x41\xec\xb2\xef\xc3\xcf\xb1\x08\x49\x0c\x6b\x13\x3f\xc3\xd8\x84\x18\x01\xe6\xda\x63\xef\x79\x51\x26\x25\x72\x0d\x4a\x13\x9d\x29\x10\x0b\x3b\x9b\xf3\x6b\xf6\xaf\x89\x04\xa2\x35\x26\xa9\x86\xa0\xb8\xc5\x9b\x39\x85\x72\x5d\xf4\x26\xcc\xd0\x54\xdf\x87\xeb\x79\x65\xe6\x38\xd5\x4c\x59\x18\x40\x00\xbf\xfc\x5a\xcd\x16\xa2\x9a\xbc\x28\x98\xbd\xc5\x05\xe3\x08\xc4\xc4\xee\x5c\x28\x7a\x45\x34\x44\x12\x89\x46\x05\x51\x2c\x54\x26\xf3\x33\x98\x9a\x13\xcc\x39\x4a\xcc\x25\x4e\xb3\x90\x5a\x7e\x4a\x24\xcd\x15\x51\xab\x56\xd1\xa6\x90\xa8\x33\xc9\xf7\x6b\xe5\xfc\xc5\x42\x48\x68\x1a\x04\x2c\x68\x4f\x80\x4d\x4b\xbc\x5e\x8c\x7c\xa9\x57\x13\x60\xaf\x5e\x55\xc0\x17\x6c\x01\xcd\x12\xe2\x17\xf6\xab\xa7\x1f\x3d\x43\x05\x82\x00\xea\xd4\x2c\xc1\x02\x8f\x4a\x63\x16\x61\x93\x5d\x42\xa7\x35\x29\x57\x43\x89\xe4\xbe\x1c\x15\x9a\xce\xff\xd9\xdf\x5d\x2e\x1a\x2a\xa2\xcc\x36\xa6\x96\xa8\xef\xf2\x8e\xc8\x7c\xf3\x96\x36\x0f\x7a\x20\x2d\xcf\x26\x22\xaf\xe8\xe7\x40\x00\x0e\x17\x1c\x9d\x1c\x45\xae\x84\x42\xe0\x37\x24\x8e\x43\x12\xdd\xd7\x85\x54\xb2\xbc\x2a\x60\x3c\x89\x9c\xa2\x6c\x36\x4e\x9a\x31\x8d\xcb\xf2\x74\x0d\xc5\x34\xde\xe3\xa6\x01\x63\x68\x6c\xb7\x75\xe3\x6f\x5c\x16\x20\x51\x41\xcb\xc0\x10\xa5\xd8\x92\x97\xd4\x73\x88\x5d\x2e\x8c\xdd\x9e\xcd\x43\xa8\x3a\x8f\xcb\x02\x7d\xc9\xeb\xb7\xca\x25\xaf\x95\x26\xcf\xe3\x38\x6d\x42\x3d\x2d\x61\x83\xa8\x80\x86\x00\x96\x95\x5d\xe7\x07\x3b\x30\x6e\xeb\x61\x07\xe6\x9d\xdf\x59\x14\x10\x58\x32\xa5\x21\x93\xb1\x31\x70\x03\x97\xfb\x59\xe5\x55\x16\xee\x9c\xce\x72\x38\x4f\x21\xa7\xcd\x7f\xfa\xf0\xa7\x77\x9e\xd2\x92\xf1\x25\x5b\x6c\x9a\xdb\x4c\xc6\x63\x78\xd9\x74\xfe\x5f\x26\x63\xa7\xf5\x4b\xfb\x57\x6f\x4d\xe2\x0c\x2f\x0b\x27\x1d\x43\x79\x3d\x33\x5e\x3c\xb6\xbf\x27\x91\xec\xb2\xf4\xd4\x71\xf9\x50\x84\xa6\x5d\xab\x35\x39\x81\x3e\x36\x23\x85\xba\x69\xc0\xaa\x60\x76\x2c\x12\x02\x09\xea\x95\xa0\xe6\xd8\x12\x23\xc1\x39\x46\x1a\xb2\x54\xf0\x42\x02\x10\x0b\xa5\x6a\x56\x5c\x40\x3c\x29\x09\x08\x6c\x0b\xeb\x5f\x31\xfc\x20\xa2\x7b\xd4\xcd\x66\xf3\x81\x71\x2a\x1e\xbc\x58\x44\xc4\x6c\xf0\x4c\xe0\x15\x91\x88\x21\x08\x02\x28\x12\x8d\xd3\x82\x9f\xc0\x79\x50\x26\xe5\x38\x30\x36\x8f\xe6\xa9\x05\xaf\xe0\x78\xfb\x4a\x28\x0d\xaf\xc0\xf1\xf3\x60\x69\x2e\x5e\x52\xfb\x24\x65\x4e\x2b\x37\xe4\x52\x27\x82\x27\xa8\x14\x59\x62\x9d\x5b\x5c\x23\xd7\x55\x8c\x30\x87\x4a\xd4\x12\x02\xb0\xba\x4b\x89\x54\x98\x83\x78\xe6\x02\x50\x06\x0b\x13\x72\x2c\x58\x10\x00\xcf\xe2\x78\x1f\x63\xf2\x98\x36\x29\xa3\xc7\x01\xb8\x67\xcb\x72\xf8\x21\x08\xc0\xd4\xc3\x46\xde\x74\xbf\xd3\xd8\x45\x5e\xb7\xb7\x3c\x53\x92\xef\x77\xb4\x26\xf5\x60\x74\x80\x0d\xe9\xdf\x43\x87\xf4\x18\x1f\xd2\x27\x10\xda\x6b\xd2\x73\xf8\xf2\x6b\x55\x0d\x9d\x9d\x78\x02\x1b\xcf\x92\x10\xe5\x73\xe8\x72\xd7\x2f\xd0\x59\x51\xbf\xe5\xba\xb6\xf7\x12\x3a\xc3\xd6\x13\xd8\x51\x4a\xf1\x24\x72\x2e\xf4\xa6\xb9\x8d\xc9\x46\x64\x7a\x0c\x0d\x2d\xd2\x1b\x7b\xaf\x69\x5c\x82\xa1\x35\x86\x0a\xc3\xa5\x6d\xf7\x8c\xa1\x61\x47\x66\x9d\x25\x68\x77\x0d\xda\xed\xf6\x25\x94\xcd\xfb\x39\x31\xfe\x28\x33\xdc\x3d\xc1\x8f\xca\xa2\x08\xd5\x93\xd2\xfb\x22\x8e\x0a\x1c\x15\x4f\xc5\xf8\x3b\xb8\xaa\x52\xfd\x01\x5b\xf0\xe3\x8f\x70\xb2\x7a\x68\xc6\xbe\x0f\xff\x42\xe4\x3d\xd8\x16\x86\xc4\x35\x13\x99\xda\x17\x0e\x09\x53\xca\xd4\x4e\x44\x01\x15\x1c\x8b\x3d\x5f\x97\xb5\x4f\x78\x2c\xc0\x60\x06\xed\x63\x06\x4d\xa4\xac\x65\xf5\x33\xc9\xbe\x86\xf7\x30\x8f\x5f\xec\xea\xf4\x0e\x76\xb2\x04\xe1\x87\x00\x1c\xa7\xbe\xf9\x04\xc2\x00\x54\xc8\x2e\x14\xea\x8f\xb9\x2e\x9a\x45\x71\x73\xae\xf4\x68\x5d\x42\xaf\xdd\x6e\xb7\x4e\x98\xd8\xed\xc5\xfb\x3a\x4d\x91\x53\x20\x7c\x63\xe3\x63\x25\x5b\xc6\xb5\x00\x91\x99\x38\x1b\x91\x18\x22\x11\xc7\x79\x51\x5a\x6c\xb5\xb5\x9a\x48\x12\xc1\x21\x00\xb7\x33\x39\x53\x04\xd5\x24\x59\x3b\xda\xb1\x7a\xce\xc8\xfe\x58\x45\x87\x32\x3b\x02\x76\x3b\x07\x4a\x39\xd0\xd7\x79\xc5\x5c\x54\x7c\xb3\xbd\x44\x8f\xd4\xb5\xd7\xd7\xb1\xcc\x6a\xfc\xe7\x78\x5e\x75\xbe\xf0\x18\xd5\x72\x9a\xa9\x55\xf3\x88\xd1\xd6\xe4\x54\x37\x6f\x35\x4a\xa2\xd1\xb6\xde\xac\x2e\x90\x6b\x26\xf1\x44\x25\x40\xb8\x29\x7a\xdd\xbc\x3c\x2b\xcb\x09\x6a\x5c\xc3\xb6\x35\x0e\x54\x66\xdf\xcd\x1f\x98\xd3\x57\x3a\x8c\xad\xa8\x05\x47\x00\x80\x23\x27\xb0\x86\x7a\x60\xa9\x06\x18\x63\x92\x2a\xa4\x10\x40\xfe\x2e\xb5\xd9\xf2\x32\xce\x1e\x9b\x2d\xb7\x18\x1f\xe3\x28\xd7\x27\xe5\x35\xed\xa2\x64\xfb\x55\x00\xce\x54\x4b\x60\x34\x68\x38\xf0\xea\x9c\x0b\x9a\x14\xdc\x98\xed\x39\xa8\x6f\x05\x98\x6a\x3a\xb3\xcd\x97\xbc\x43\xf3\x57\xc7\xd4\x93\x4b\x29\x32\x4e\xc7\xa6\xcc\x6a\x9e\xa0\x25\x6b\xa2\x89\xb4\x58\x5b\x13\xd8\x83\xbb\x8a\xfd\x0d\xc7\x10\x19\xe5\x4c\x20\xef\x2d\xda\x1e\x0f\x54\x5d\x51\x3b\x0a\x85\xa4\x28\x5d\x49\x28\xcb\xd4\x18\xfa\xe9\xe3\xe4\xaf\xe5\xbb\x4b\xdb\x89\x7a\x96\xd5\x54\xe2\xec\x84\xa3\x28\xb2\xaf\x4a\x5e\x81\x33\xf5\x0d\xc0\xdf\x43\x53\x1d\xb6\xfe\x0e\x17\xce\xf4\xdb\xa0\x7a\x59\x5a\xcc\x27\x8c\xd2\x18\x0d\xc3\x7b\xf4\xc6\x19\x8d\xfe\xeb\x2e\x75\x48\x12\x8a\x46\xdb\x7e\xcf\x0e\x30\x56\xf8\xcc\x86\xaa\x67\xd7\x30\x06\xe0\x9a\x23\x33\x2b\xf3\xa2\x4b\x66\xa7\x65\xc3\xca\xa2\x78\x23\x4f\x33\x69\x0b\xaf\xa6\x5b\x18\xd8\x25\x34\x94\x29\x04\xa9\x6a\xb4\xbc\x55\x96\x10\xce\xfe\x86\x4d\x93\x97\x5a\xb9\xac\x6c\x13\xd0\x39\x0d\xc9\x27\xcc\xec\xbb\x73\x8d\x32\xc7\x35\x0a\x21\x36\x4a\xed\x1a\x45\xd6\xde\x66\x37\xbe\x52\x42\xe7\xa9\xb8\x21\x91\x50\x1f\xb8\x65\xf2\x05\x29\x0c\xf5\x72\x2d\x24\xb2\x91\x37\x40\x6d\xe9\xce\xc5\x43\xd0\xe8\xb5\x2b\x26\x73\x45\x5b\x3d\x37\x0a\x5b\x3b\x51\x86\xe1\xb2\x74\xcd\x19\xf4\xda\xbf\x07\xb7\x94\xd8\xb7\xce\x87\x27\xd0\x92\xa5\x48\x81\x44\x9a\xad\xf1\x1f\x70\x90\xdf\x41\xc8\x5f\xcd\xa2\xb1\xc3\x52\x78\xd6\x4c\x0f\xf8\x35\xab\x95\x6c\xff\xbf\xf1\x37\xf0\xad\x84\x5f\x81\x73\xf6\x20\x4f\x5a\xe2\x11\xe0\x91\x6b\x3f\xed\xf7\xb6\xab\xed\x1c\xe7\x14\x53\xed\x56\xef\x63\x5a\xde\x4a\x27\x71\xd3\x99\x6a\xfb\xad\x85\xe1\xb9\xc2\x60\x11\xe4\xd3\x87\x25\xdd\xee\xf0\x22\x13\xc5\x42\xe1\xd1\xa5\x0b\x6a\xc5\x49\x75\x31\x2b\x2b\x11\xd8\xed\x3f\x49\xf1\x7d\xf8\xa0\x89\xd4\x40\xe0\xd3\x5b\xc8\x52\x4a\xb4\xc9\x5e\x02\x4c\x7e\xb4\x59\xac\xfa\x66\x25\x24\x52\xc1\x42\xc8\x07\x22\x29\x64\x5c\xb3\xd8\xac\x6f\x6c\x67\xb1\x2c\xfd\x14\xea\xb7\x26\x8a\xad\x49\xdc\x3c\xb9\x04\xbe\x6c\x36\xbc\xba\xca\x1b\x2d\x0f\x49\xb4\x3a\x05\xb4\x19\xab\xa2\x1b\xc0\x3b\x7b\x05\x68\xbe\x6c\xea\x15\x53\x2d\x8f\x68\x2d\x9b\x8d\x03\x63\x68\xb4\x8c\x5e\x3b\xb5\x2b\x59\xb5\x7d\x7a\xe0\x56\xcf\xe1\xd8\x17\xd3\x55\x21\x50\x82\x47\x4a\x35\x73\xbb\x6a\x5c\xd6\x70\x1f\x9a\x55\xe3\x0f\x8d\x4a\x51\x7b\xf7\xde\x9f\x23\x38\xcb\xc9\x01\xea\x86\xf1\xb2\xc6\x09\x79\x42\xe9\x8d\xf1\x9f\xa6\x73\xc6\xd3\x8f\xad\xa3\x55\x09\x3b\x8f\xd7\xcf\x4a\x99\x71\x8a\x8f\x4f\x89\x98\xd1\x46\xcb\x53\x59\x98\xb7\x2d\x9a\x83\xea\x02\x56\x82\x59\xe3\x3d\x4e\x05\x27\x05\x85\x21\x71\x58\x54\xb8\x47\x45\xc8\x33\x59\xa3\x20\x99\x9f\x6a\x77\x69\x04\xde\x6e\x55\x9d\xc9\x3b\x65\x8a\x2b\xa6\x56\x40\xec\xd7\x37\xb6\xad\x00\x85\xbd\xdb\x4e\x4e\xde\xb1\x79\xfd\xfe\x6d\xad\x6b\x53\x79\x44\xd3\x62\xaf\x3e\x27\x3b\xd7\x32\x39\xfb\xfd\xda\x67\xe5\x55\x8d\x94\x48\x24\x7e\xc7\x27\x29\xf3\x3e\xab\x9f\x04\x8f\x05\xa1\xc1\x49\x47\xef\xc7\xbc\x2c\x0c\xf0\x31\x8d\x59\xc4\xb4\x63\x0f\x45\xd4\x86\x47\x40\x71\x81\x72\x56\x63\xa2\x68\xc8\x4c\xfd\xfc\xfb\xab\xa9\x9f\x7f\x54\xfa\x3f\x01\x00\x00\xff\xff\x21\x0a\x46\x93\x65\x2a\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0x9e, 0xba, 0xf2, 0x2e, 0xf6, 0x7b, 0x36, 0x75, 0x39, 0x92, 0xe2, 0xc, 0xb4, 0x18, 0x1a, 0xcc, 0x20, 0x9b, 0xb0, 0xb4, 0xe5, 0xf6, 0xc, 0xd7, 0x8a, 0xde, 0xd7, 0x7f, 0x49, 0x4b, 0x21}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
