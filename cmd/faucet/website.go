// Code generated by go-bindata. DO NOT EDIT.
// sources:
// faucet.html (10.896kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3a\xdb\x72\xe3\x3a\x72\xcf\x9e\xaf\xe8\x65\x66\x8f\xa4\x8c\x49\xea\x6e\x59\x12\x75\x6a\x64\x7b\x76\x9d\xaa\xcc\x4e\xed\xcc\xa9\x6c\xea\xec\xa9\x14\x48\xb4\x44\x8c\x49\x80\x07\x00\x65\x7b\x5d\x7a\xcf\x6b\xbe\x20\xbf\x98\x4f\x48\x01\xbc\x88\xba\xd8\x3b\x97\xb3\x95\x8a\x1f\x64\x02\x68\x74\x37\xfa\x8e\x26\xe7\xbf\xbb\xfe\xd3\xd5\xa7\x7f\xff\x70\x03\xb1\x4e\x93\xc5\xab\xb9\xf9\x07\x09\xe1\xeb\xc0\x41\xee\x2c\x5e\x9d\xcd\x63\x24\x74\xf1\xea\xec\x6c\x9e\xa2\x26\x10\xc5\x44\x2a\xd4\x81\x93\xeb\x95\x3b\x71\x76\x0b\xb1\xd6\x99\x8b\xbf\xe6\x6c\x13\x38\x7f\x71\x7f\x7a\xeb\x5e\x89\x34\x23\x9a\x85\x09\x3a\x10\x09\xae\x91\xeb\xc0\xb9\xbd\x09\x90\xae\xb1\xb1\x8f\x93\x14\x03\x67\xc3\xf0\x3e\x13\x52\x37\x40\xef\x19\xd5\x71\x40\x71\xc3\x22\x74\xed\xe0\x1c\x18\x67\x9a\x91\xc4\x55\x11\x49\x30\xe8\x39\x8b\x57\x06\x8f\x66\x3a\xc1\xc5\xd3\x93\xf7\x1e\xf5\xbd\x90\x77\xdb\xed\x14\xde\x91\x3c\x42\x3d\xf7\x8b\x35\x0b\x96\x30\x7e\x07\xb1\xc4\x55\xe0\x18\x66\xd5\xd4\xf7\x23\xca\x3f\x2b\x2f\x4a\x44\x4e\x57\x09\x91\xe8\x45\x22\xf5\xc9\x67\xf2\xe0\x27\x2c\x54\xbe\xbe\x67\x5a\xa3\x74\x43\x21\xb4\xd2\x92\x64\xfe\xc0\x1b\x78\x17\x7e\xa4\x94\x5f\xcf\x79\x29\xe3\x5e\xa4\x94\x03\x12\x93\xc0\x51\xfa\x31\x41\x15\x23\x6a\x07\xfc\xc5\xb7\xd1\x5d\x09\xae\x5d\x72\x8f\x4a\xa4\xe8\x0f\xbd\x0b\xaf\x6b\x49\x36\xa7\x5f\xa6\x6a\xc8\xaa\x48\xb2\x4c\x83\x92\xd1\x17\xd3\xfd\xfc\x6b\x8e\xf2\xd1\x1f\x78\x3d\xaf\x57\x0e\x2c\x9d\xcf\xca\x59\xcc\xfd\x02\xe1\xe2\xbb\x70\xbb\x5c\xe8\x47\xbf\xef\x0d\xbd\x9e\x9f\x91\xe8\x8e\xac\x91\x56\x94\xcc\x92\x57\x4d\xfe\x66\x74\x9f\xd3\xe1\xe7\x43\x15\xfe\x16\xc4\x52\x91\x22\xd7\xde\x67\xe5\xf7\xbd\xde\xc4\xeb\x56\x13\xc7\xf8\x2d\x01\xa3\x34\x43\xea\xcc\xdb\xa0\xd4\x2c\x22\x89\x1b\x21\xd7\x28\xe1\xc9\xcc\x9e\xa5\x8c\xbb\x31\xb2\x75\xac\xa7\xd0\xeb\x76\x7f\x3f\x3b\x35\xbb\x89\x8b\x69\xca\x54\x96\x90\xc7\x29\xac\x12\x7c\x28\xa6\x48\xc2\xd6\xdc\x65\x1a\x53\x35\x85\x02\xb3\x5d\xd8\x5a\x9a\x99\x14\x6b\x89\x4a\x95\xc4\x32\xa1\x98\x66\x82\x4f\x8d\x45\x11\xcd\x36\x78\x0a\x56\x65\x84\x1f\x6d\x20\xa1\x12\x49\xae\xf1\x80\x91\x30\x11\xd1\x5d\x31\x67\xfd\xb7\x79\x88\x48\x24\x42\x4e\xe1\x3e\x66\xe5\x36\xb0\x84\x20\x93\x58\xa2\x87\x8c\x50\xca\xf8\x7a\x0a\xe3\xac\x3c\x0f\xa4\x44\xae\x19\x9f\x42\x77\xb7\x65\xee\x57\x62\x9c\xfb\x45\xa8\x7a\x75\x36\x0f\x05\x7d\x34\x33\x94\x6d\x80\xd1\xc0\x91\x18\x91\x4c\x47\x31\xf9\x0f\x4c\xd0\x68\xc4\xa8\x82\xb2\x8d\x05\xae\x80\x8a\xc8\x43\x97\x82\x3e\x3a\x10\x25\x44\xa9\xc0\x39\xd0\x8b\x8d\x5b\xc5\x8e\x12\xc0\x6c\x22\x8c\x57\x4b\x7b\x6b\x52\xdc\x3b\x60\xb9\x0b\x9c\x82\x73\x37\x14\x5a\x8b\x74\x0a\x3d\x73\xa6\x72\xcb\x01\xbe\xc4\x4d\xd6\x6e\xaf\xef\x2c\x5e\xc1\x33\x7f\xf3\xb8\x57\xa1\xd5\xf8\xa0\x5d\xab\xe6\x5a\xc1\xce\x62\xce\x2a\x6c\x2b\x02\x2b\xe2\x86\x44\xc7\x0e\x10\xc9\x88\x1b\x33\x4a\x91\x07\x8e\x96\x39\x1a\x19\xb0\xc5\xa7\x98\x29\xb8\xc7\x50\x31\x8d\x70\xcf\x92\x04\xb8\x80\x44\xf0\x35\x4a\x08\x11\x52\xc2\x8a\x03\xd2\x79\x28\xfd\xc5\x9c\x1c\x44\x32\xca\x54\x24\x24\xf5\xd6\x6b\x3f\xe4\x61\x14\x13\xc6\x9d\xc5\x87\x04\x89\x42\xf8\x2c\x18\x87\xe5\xfb\x25\x94\x40\x40\x38\x05\x85\x44\x46\x31\xac\x84\x04\x8d\x4a\x73\xd4\xee\xca\xc6\x6a\x93\x5a\x38\xc7\x04\xb4\x80\x5c\x21\xe8\x18\x81\xe3\x3d\x6c\x50\x2a\x26\xb8\xf7\x3f\xff\xfd\x5f\xff\x39\xf7\xc9\x62\xee\xc7\xbd\x4a\x70\x85\x0e\x0f\x1f\x0f\x54\xf0\xbc\x94\x27\x50\x3e\x88\xd5\x4a\xa1\x76\xfb\x15\xec\x1e\x30\xe3\x59\xae\xdd\xb5\x14\x79\x56\xaf\x9f\xcd\xed\xac\xb5\x9b\x5c\x26\x4e\x99\xc6\xec\xa3\x7e\xcc\x4a\xcd\xd4\x66\xb4\x12\x32\x75\x8d\xa9\x48\x91\x38\x90\x25\x24\xc2\x58\x24\x14\x65\xe0\xdc\x5a\x3c\x8f\x22\x97\x56\x54\x1f\x53\x22\x35\x5c\x19\x39\x02\xa1\xd4\xf8\x9c\xe7\x79\x0d\xba\xd6\x01\x8f\x39\x73\x43\xcd\x77\x50\x67\xf3\x30\xd7\x5a\xd4\x80\xa1\xe6\x10\x6a\xee\x52\x5c\x91\x3c\xd1\x40\xa5\xc8\xa8\xb8\xe7\xae\x16\xeb\xb5\x49\xd0\x05\xcf\xc5\x26\x07\x28\xd1\xa4\x5c\x0a\x9c\x0a\xb6\xb2\x20\xa2\x32\x91\xe5\x59\x69\x43\xc5\x24\x3e\x64\x84\x53\xa4\xc6\xe2\x12\x85\xce\xe2\x0f\x6c\x83\x90\xa2\x39\xd2\xd9\xa1\x39\x46\x44\xa2\x76\x9b\x28\x8f\x8c\x72\xee\x17\xac\x14\x07\xaa\xed\x3e\x4f\x2a\x4c\xf5\x01\x52\xe4\x39\xec\x8d\x5c\x69\x42\x63\x2d\x0b\x80\xa7\x27\x49\xf8\x1a\xe1\x35\xa3\x0f\xe7\xf0\x9a\xa4\x22\xe7\x1a\xa6\x01\x78\x6f\xed\xa3\xda\x6e\xf7\xc8\x00\xcc\x13\x06\xc6\xd4\x5f\x70\x32\x10\x3c\x4a\x58\x74\x17\x38\x9a\xa1\x0c\x9e\x9e\x0c\xf6\xed\x76\xa6\x1e\xd3\x50\x24\x41\x6b\xf9\x7e\xd9\x9a\xa9\x3c\x4c\x99\x6e\x77\x9c\xc5\xd3\x53\x49\x77\xbb\x2d\x6c\x38\x61\x8b\xa7\x27\xe4\xf4\x80\xf6\xdc\xcf\x93\x9d\xae\x7d\xa3\xec\xff\x6f\xaa\xff\x80\xeb\xf5\x23\x68\x71\x87\x5c\xfd\x1f\xa9\x7e\xa7\xf2\x42\x1d\xe7\xf0\x3a\xc4\xac\x8f\xb7\x7c\x25\xac\xe2\x97\xd5\xa8\xd2\xbd\x15\x5c\xc2\xbe\x58\xe9\xa5\x9a\x9f\x9e\x4a\x0a\xdb\xed\x0c\xf6\xb4\x5d\xd3\x2b\x8d\xec\xa3\x96\xdb\x2d\x34\xe0\xbf\xd5\x0c\x1a\x81\xee\x0b\xe3\xdf\x41\x0a\xd2\x22\x9b\xc2\xa0\xdf\xc8\x3f\xa7\x42\xe3\xf8\x20\x34\x0e\x4e\x02\x67\xc4\x04\x6c\xfb\xeb\xaa\x94\x24\xd5\x73\x69\x6c\x8d\xb0\x75\xb8\xc9\x0d\x6d\x9a\x2d\x59\xab\x53\x7d\x77\x06\x62\x83\x72\x95\x88\xfb\x29\x90\x5c\x8b\x19\xa4\xe4\xa1\x2e\x77\x06\xdd\x6e\x93\x6f\x53\xfb\x93\x30\xc1\x32\xc7\xff\x9a\xa3\xd2\xaa\x0e\xba\xc5\x92\xfd\x35\xb1\x97\x22\x57\x48\x0f\xa4\x61\x28\x1a\xbb\xb3\x50\x0d\x89\xef\x64\x7c\x8a\xf7\x95\x10\x75\x31\xd0\x64\xa3\x44\xdd\x28\x76\x9c\xc5\x5c\xcb\x1d\xdc\xd9\x5c\xd3\xaf\x4a\xdd\xd2\x54\xf8\xcf\x78\x0a\x14\x01\xc1\x9c\x3d\x43\x94\x45\x79\x69\x2c\x05\xec\x70\xee\x6b\xfa\x1d\x94\x4d\x20\x08\x89\xc2\x2f\x21\x6f\x0b\xbd\x1d\x79\x3b\xfc\x5e\xfa\x31\x12\xa9\x43\x24\xfa\x4b\x18\x58\xe5\x9c\x36\xce\xbf\x7c\xbf\xfc\x5e\xf2\x39\x67\xb6\xf0\xd0\x8f\x5f\x4a\x1f\xe9\x8e\x81\x62\xbc\xcf\xc2\xdc\xd7\xf2\x65\x4b\xfb\x07\xb8\xf6\x73\xa5\x65\x49\x30\x1e\x2c\xfe\x28\xee\x81\x0a\x54\xa0\x6d\x21\x28\xe4\xdd\x8f\x73\x3f\x1e\xd4\x20\xd9\x71\xcd\x57\xd6\x6d\x5e\xa8\x22\x15\x11\x5e\xdc\x81\x8a\x5a\xc5\xef\x3e\x8c\x23\x9c\xd0\xb7\xfd\xc9\x4d\x7f\x35\x19\x0f\x87\xfd\xee\x64\xd8\x8d\xde\x5d\x0c\x87\x17\x43\x7c\xb7\x1a\xad\xae\x27\xdd\x9b\xf1\x68\x39\x71\x16\xcb\x4f\x57\x26\x0a\x9e\x7f\x25\x01\x3a\x1e\x47\xe3\xe5\xf0\x5d\x37\xc4\xc9\xd5\xcd\x28\x1c\x5c\x5e\x8f\xfa\x37\xdd\x77\xb4\x37\x18\x0e\xa3\xc1\xe4\xf2\xb2\x7f\xb9\x1c\x5c\x4c\x9c\xc5\xcd\xa7\x3f\x7e\x0b\x01\x32\x19\x8c\x2e\x46\xc3\xcb\xee\xf5\x05\x5d\x0d\x6f\xfa\xef\x86\x17\xe1\xc5\xf5\x60\x82\xab\xc1\xa8\x47\xfa\x17\xfd\x7e\xf4\x76\x38\x0a\x2f\x9d\xc5\x5f\xfe\xfc\xe1\x5b\x08\x20\xed\x0f\x57\xd1\x60\x4c\x47\x88\xfd\x5e\x0f\x49\x7f\x44\x26\xdd\xfe\xe0\x72\x15\x4e\xa2\x61\xb4\xa2\x93\xee\xaa\xd7\x47\x74\x16\xcb\x9f\x3e\x5e\x7f\x0b\x85\xc1\xe0\x62\xdc\xeb\xd2\xfe\x45\x34\x9e\xf4\x6f\x06\xc3\x8b\xab\xcb\xe8\x7a\xdc\x5d\x5e\x0f\xc3\x41\xd8\xeb\x5e\x5c\x5d\xd2\xc1\x90\x5e\x53\x67\xf1\xd3\xc7\xeb\x4f\xdf\x42\x61\x3c\x1c\x0d\x87\x97\xe3\x4b\xa4\x17\x37\xcb\xd5\x68\xd5\x9d\x0c\xc6\x17\x97\xfd\xc1\x60\xd0\x1f\x0d\x46\xe3\x9b\xf0\xe6\x62\x30\xb9\x1c\x74\x2d\x85\x6f\xd2\xf3\xcd\xd5\x88\x5e\x85\xa3\xeb\x70\x35\x5c\xf6\x7a\xc3\xab\x4b\xda\x7d\x37\x1e\x2d\xa3\xab\xb7\xe1\xf0\xf2\xe6\x6a\x34\x7c\x37\x7e\xdb\x9d\x8c\x2f\x9c\xc5\xf5\xdb\x5b\x43\x00\x88\x44\x60\x4a\xe5\x48\x81\x28\x58\xde\x7c\xe8\x77\x8b\x42\xc4\x9b\xfb\x59\xc3\xa2\xe1\xca\x64\x71\x73\xd1\x58\xa3\x06\x8a\x9a\xb0\x04\x48\x28\x72\x0d\x47\x3c\xae\x99\x8e\xf3\xd0\xb2\x16\xf2\xd0\xb5\x37\x1c\x7f\x79\xf3\x41\xf9\x61\x22\x42\x3f\x25\x4a\xa3\xf4\x2d\x2d\x2f\xa5\xce\xc2\x3e\x19\x6e\x0a\x9a\x0d\xa2\x1f\xf3\x2c\x13\x52\xc3\x75\x71\x1b\x9a\xee\xd3\x7a\xee\x2e\x05\x27\x66\xc1\x9e\xb6\x71\xa6\xa7\x27\xb6\x02\xef\xcf\xd5\x2d\x77\xbb\x9d\x63\xba\xf8\x14\x23\x94\x57\x2b\xa6\x40\xe6\x9c\x33\xbe\x06\x89\x57\x05\x10\x64\x52\x68\x8c\xcc\x0d\x1e\xc8\x9a\x30\xae\x34\x84\x42\x2b\x6f\xee\x63\xba\x57\x95\x9c\x0e\x46\xf5\x53\x7d\x93\xae\x5a\x26\x76\xd9\xf7\xe1\x0f\x89\x08\x49\x02\x1b\x13\x3f\xc3\xc4\x84\x18\x01\xe6\xda\x63\xaf\x76\x51\x2e\x25\x72\x0d\x4a\x13\x9d\x2b\x10\x2b\x3b\x5b\xf0\x6b\xf6\x6f\x88\x04\xa2\x35\xa6\x99\x86\xa0\xbc\xf0\x9b\x39\x85\x72\x53\xb6\x31\xcc\xd0\x54\xdf\xfb\xeb\x45\x65\xe6\x38\xf5\x4c\x55\x18\x40\x00\x3f\xff\x52\xcf\x96\xa2\x9a\xbd\x2a\x99\xbd\xc6\x15\xe3\x08\xc4\xc4\xee\x42\x28\x3a\x26\x1a\x22\x89\x44\xa3\x82\x28\x11\x2a\x97\xc5\x19\x4c\xcd\x09\xe6\x1c\x15\xe6\x0a\xa7\x59\xc8\x2c\x3f\x15\x92\x76\x4c\x54\xdc\x29\x3b\x1a\x12\x75\x2e\xf9\x6e\xad\x9a\x3f\x33\x97\xe1\xb6\x41\xc0\x82\xee\x0c\xd8\xbc\xc2\xeb\x25\xc8\xd7\x3a\x9e\x01\x7b\xf3\xa6\x06\x3e\x63\x2b\x68\x57\x10\x3f\xb3\x5f\x3c\xfd\xe0\x19\x2a\x10\x04\xd0\xa4\x66\x09\x96\x78\x54\x96\xb0\x08\xdb\xec\x1c\x7a\x9d\x59\xb5\x1a\x4a\x24\x77\xd5\xa8\xd4\x74\xf1\xcf\xfe\x6e\x0b\xd1\x50\x11\xe5\xb6\x87\xb5\x46\x7d\x53\x34\x4f\x96\x8f\xb7\xb4\xbd\xd7\x2e\xe9\x78\x36\x11\x79\x65\xeb\x07\x02\x70\xb8\xe0\xe8\x14\x28\x0a\x25\x94\x02\xbf\x22\x49\x12\x92\xe8\xae\x29\xa4\x8a\xe5\xb8\x84\xf1\x24\x72\x8a\xb2\xdd\x3a\xea\xdb\xb4\xce\xab\xd3\xb5\x14\xd3\x78\x87\x8f\x2d\x98\x42\xeb\xe9\xa9\x69\xfc\xad\xf3\x12\x24\x2a\x69\x19\x18\xa2\x14\x5b\xf3\x8a\x7a\x01\xb1\x2d\x84\xb1\xdd\xb1\xb9\x0f\xd5\xe4\x71\x5d\xa2\xaf\x78\xfd\x56\xb9\x14\xb5\xd2\xec\x65\x1c\xc7\xfd\xaa\xe7\x25\x6c\x10\x95\xd0\x10\xc0\xba\xb6\xeb\xe2\x60\x7b\xc6\x6d\x3d\x6c\xcf\xbc\x8b\x3b\x8b\x02\x02\x6b\xa6\x34\xe4\xd2\xb6\x5f\x0c\x5c\xe1\x67\xb5\x57\x59\xb8\x53\x3a\x2b\xe0\x3c\x85\x9c\xb6\xff\xe5\xe3\x9f\xde\x7b\x4a\x4b\xc6\xd7\x6c\xf5\xd8\x7e\xca\x65\x32\x85\xd7\x6d\xe7\x9f\x72\x99\x38\x9d\x9f\xbb\xbf\x78\x1b\x92\xe4\x78\x5e\x3a\xe9\x14\xaa\xeb\x99\xf1\xe2\xa9\xfd\x3d\x8a\x64\xe7\x95\xa7\x4e\xab\x87\x32\x34\x6d\x3b\x9d\xd9\x11\xf4\xa1\x19\x29\xd4\x6d\x03\x56\x07\xb3\x43\x91\x10\x48\x51\xc7\x82\x9a\x63\x4b\x8c\x04\xe7\x18\x69\xc8\x33\xc1\x4b\x09\x40\x22\x94\x6a\x58\x71\x09\xf1\xac\x24\x20\xb0\x5d\xab\x7f\xc3\xf0\xa3\x88\xee\x50\xb7\xdb\xed\x7b\xc6\xa9\xb8\xf7\x12\x11\x11\xb3\xc1\x33\x81\x57\x44\x22\x81\x20\x08\xa0\x4c\x34\x4e\x07\x7e\x04\xe7\x5e\x99\x94\xe3\xc0\xd4\x3c\x9a\xa7\x0e\xbc\x81\xc3\xed\xb1\x50\x1a\xde\x80\xe3\x17\xc1\xd2\x5c\xbc\xa4\xf6\x49\xc6\x9c\x4e\x61\xc8\x95\x4e\x04\x4f\x51\x29\xb2\xc6\x26\xb7\xb8\x41\xae\xeb\x18\x61\x0e\x95\xaa\x35\x04\x60\x75\x97\x11\xa9\xb0\x00\xf1\xcc\x05\xa0\x0a\x16\x26\xe4\x58\xb0\x20\x00\x9e\x27\xc9\x2e\xc6\x14\x31\x6d\x56\x45\x8f\x3d\x70\xcf\x96\xe5\xf0\xbb\x20\x00\x53\x0f\x1b\x79\xd3\xdd\x4e\x63\x17\x45\xdd\xde\xf1\x4c\x49\xbe\xdb\xd1\x99\x35\x83\xd1\x1e\x36\xa4\x7f\x0f\x1d\xd2\x43\x7c\x48\x9f\x41\x68\xaf\x49\x2f\xe1\x2b\xae\x55\x0d\x74\x76\xe2\x19\x6c\x3c\x4f\x43\x94\x2f\xa1\x2b\x5c\xbf\x44\x67\x45\x7d\xcb\x75\x63\xef\x39\xf4\xc6\x9d\x67\xb0\xa3\x94\xe2\x59\xe4\x5c\xe8\xc7\xf6\x53\x42\x1e\x45\xae\xa7\xd0\xd2\x22\xbb\xb2\xf7\x9a\xd6\x39\x18\x5a\x53\xa8\x31\x9c\xdb\x76\xcf\x14\x5a\x76\x64\xd6\x59\x8a\x76\xd7\xa8\xdb\xed\x9e\x43\xd5\xe7\x5f\x12\xe3\x8f\x32\xc7\xed\x33\xfc\xa8\x3c\x8a\x50\x3d\x2b\xbd\x2f\xe2\xa8\xc4\x51\xf3\x54\x8e\xbf\x83\xab\x3a\xd5\xef\xb1\x05\x3f\xfc\x00\x47\xab\xfb\x66\xec\xfb\xf0\xaf\x44\xde\x81\x6d\x61\x48\xdc\x30\x91\xab\x5d\xe1\x90\x32\xa5\x4c\xed\x44\x14\x50\xc1\xb1\xdc\xf3\x75\x59\xfb\x88\xc7\x12\x0c\x16\xd0\x3d\x64\xd0\x44\xca\x46\x56\x3f\x91\xec\x1b\x78\xf7\xf3\xf8\xd9\xb6\x49\x6f\x6f\x27\x4b\x11\x7e\x17\x80\xe3\x34\x37\x1f\x41\x18\x80\x1a\xd9\x99\x42\xfd\xa9\xd0\x45\xbb\x2c\x6e\x4e\x95\x1e\x9d\x73\x18\x74\xbb\xdd\xce\x11\x13\xdb\x9d\x78\xdf\x66\x19\x72\x0a\x84\x3f\xda\xf8\x58\xcb\x96\x71\x2d\x40\xe4\x26\xce\x46\x24\x81\x48\x24\x49\x51\x94\x96\x5b\x6d\xad\x26\xd2\x54\x70\x08\xc0\xed\xcd\x4e\x14\x41\x0d\x49\x36\x8e\x76\xa8\x9e\x13\xb2\x3f\x54\xd1\xbe\xcc\x0e\x80\xdd\xde\x9e\x52\xf6\xf4\x75\x5a\x31\x67\x35\xdf\x6c\x27\xd1\x03\x75\xed\xf4\x75\x28\xb3\x06\xff\x05\x9e\x37\xbd\x2f\x3c\x46\xbd\x9c\xe5\x2a\x6e\x1f\x30\xda\x99\x1d\xeb\xe6\x56\xa3\x24\x1a\x6d\xeb\xcd\xea\x02\xb9\x66\x12\x8f\x54\x62\x5f\xe0\x48\x74\x8b\xf2\xac\x2a\x27\xa8\x71\x0d\xdb\xd6\xd8\x53\x99\x7d\x8d\xbf\x67\x4e\x5f\xe9\x30\xb6\xa2\x16\x1c\x01\x00\x0e\x9c\xc0\x1a\xea\x9e\xa5\x1a\x60\x4c\x48\xa6\x90\x42\x00\xc5\x6b\xd7\x76\xc7\xcb\x39\x7b\x68\x77\xdc\x72\x7c\x88\xa3\x5a\x9f\x55\xd7\xb4\xb3\x8a\xed\x37\x01\x38\x73\x2d\x81\xd1\xa0\xe5\xc0\x9b\x53\x2e\x68\x52\x70\x6b\xb1\xe3\xa0\xb9\x15\x60\xae\xe9\xc2\x36\x5f\x8a\x0e\xcd\x5f\x1d\x53\x4f\xae\xa5\xc8\x39\x9d\x9a\x32\xab\x7d\x84\x96\x6c\x88\x26\xd2\x62\xed\xcc\x60\x07\xee\x2a\xf6\x37\x9c\x42\x64\x94\x33\x83\xa2\xb7\x68\x7b\x3c\x50\x77\x45\xed\x28\x14\x92\xa2\x74\x25\xa1\x2c\x57\x53\x18\x66\x0f\xb3\xbf\x56\xaf\x39\x6d\x27\xea\x45\x56\x33\x89\x8b\x23\x8e\xa2\xc8\xbe\x2a\x79\x03\xce\xdc\x37\x00\x7f\x0f\x4d\x7d\xd8\xe6\xeb\x5e\x38\xd1\x6f\x83\xfa\xbd\x6a\x39\x9f\x32\x4a\x13\x34\x0c\xef\xd0\x1b\x67\x34\xfa\x6f\xba\xd4\x3e\x49\x28\x1b\x6d\xbb\x3d\x5b\xc0\x44\xe1\x0b\x1b\xea\x9e\x5d\xcb\x18\x80\x6b\x8e\xcc\xac\xcc\xcb\x2e\x99\x9d\x96\x2d\x2b\x8b\xf2\xe5\x3d\xcd\xa5\x2d\xbc\xda\x6e\x69\x60\xe7\xd0\x52\xa6\x10\xa4\xaa\xd5\xf1\xe2\x3c\x25\x9c\xfd\x0d\xdb\x26\x2f\x75\x0a\x59\xd9\x26\xa0\x73\x1c\x92\x8f\x98\xd9\x75\xe7\x5a\x55\x8e\x6b\x95\x42\x6c\x55\xda\x35\x8a\x6c\xbc\xf8\x6e\x7d\xa5\x84\x4e\x53\x71\x43\x22\xa1\x39\x70\xab\xe4\x0b\x52\x18\xea\xd5\x5a\x48\x64\xab\x68\x80\xda\xd2\x9d\x8b\xfb\xa0\x35\xe8\xd6\x4c\x16\x8a\xb6\x7a\x6e\x95\xb6\x76\xa4\x0c\xc3\x65\xe5\x9a\x0b\x18\x74\x7f\x0b\x6e\x29\xb1\x2f\xa8\xf7\x4f\xa0\x25\xcb\x90\x02\x89\x34\xdb\xe0\x3f\xe0\x20\xbf\x81\x90\xbf\x9a\x45\x63\x87\x95\xf0\xac\x99\xee\xf1\x6b\x56\x6b\xd9\xfe\xb3\xf1\x37\xf0\xad\x84\xdf\x80\x73\xf2\x20\xcf\x5a\xe2\x01\xe0\x81\x6b\x3f\xef\xf7\xb6\xab\xed\x1c\xe6\x14\x53\xed\xd6\xef\x63\x3a\x5e\xac\xd3\xa4\xed\xcc\xb5\xfd\x2c\xc3\xf0\x5c\x63\xb0\x08\x8a\xe9\xfd\x92\x6e\xbb\x7f\x91\x89\x12\xa1\xf0\xe0\xd2\x05\x8d\xe2\xa4\xbe\x98\x55\x95\x08\x6c\x77\x5f\xaf\xf8\x3e\x7c\xd4\x44\x6a\x20\xf0\xd3\x2d\xe4\x19\x25\xda\x64\x2f\x01\x26\x3f\xda\x2c\x56\x7f\xde\x12\x12\xa9\x60\x25\xe4\x3d\x91\x14\x72\xae\x59\x62\xd6\x1f\x6d\x67\xb1\x2a\xfd\x14\xea\x5b\x13\xc5\x36\x24\x69\x1f\x5d\x02\x5f\xb7\x5b\x5e\x53\xe5\xad\x8e\x87\x24\x8a\x8f\x01\x6d\xc6\xaa\xe9\x06\xf0\xde\x5e\x01\xda\xaf\xdb\x3a\x66\xaa\xe3\x11\xad\x65\xbb\xb5\x67\x0c\xad\x8e\xd1\x6b\xaf\x71\x25\xab\xb7\xcf\xf7\xdc\xea\x25\x1c\xbb\x62\xba\x2e\x04\x2a\xf0\x48\xa9\x76\x61\x57\xad\xf3\x06\xee\x7d\xb3\x6a\xfd\xbe\x55\x2b\x6a\xe7\xde\xbb\x73\x04\x27\x39\xd9\x43\xdd\x32\x5e\xd6\x3a\x22\x4f\x28\xbd\x32\xfe\xd3\x76\x4e\x78\xfa\xa1\x75\x74\x6a\x61\x17\xf1\xfa\x45\x29\x33\x4e\xf1\xe1\x39\x11\x33\xda\xea\x78\x2a\x0f\x8b\xb6\x45\x7b\x54\x5f\xc0\x2a\x30\x6b\xbc\x87\xa9\xe0\xa8\xa0\x30\x24\xf6\x8b\x0a\xf7\xa0\x08\x79\x21\x6b\x94\x24\x8b\x53\x6d\xcf\x8d\xc0\xbb\x9d\xba\x33\x79\xa3\x4c\x71\xc5\x54\x0c\xc4\x7e\xa8\x63\xdb\x0a\x50\xda\xbb\xed\xe4\x14\x1d\x9b\xb7\x1f\x6e\x1b\x5d\x9b\xda\x23\xda\x16\x7b\xfd\xe5\xd9\xa9\x96\xc9\xc9\x4f\xdd\x3e\x2b\xaf\x6e\xa4\x44\x22\xf5\x7b\x3e\xc9\x98\xf7\x59\xfd\x28\x78\x22\x08\x0d\x8e\x3a\x7a\x3f\x14\x65\x61\x80\x0f\x59\xc2\x22\xa6\x1d\x7b\x28\xa2\x1e\x79\x04\x14\x57\x28\x17\x0d\x26\xca\x86\xcc\xdc\x2f\x3e\xd5\x9a\xfb\xc5\xf7\xa7\xff\x1b\x00\x00\xff\xff\x0d\x45\x54\xe6\x90\x2a\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x83, 0xf5, 0xfb, 0xe2, 0xa9, 0xd1, 0xdd, 0xcd, 0x3e, 0x4f, 0xbb, 0xd7, 0x8, 0x7a, 0x17, 0xab, 0x3e, 0x71, 0x98, 0x7d, 0x19, 0x67, 0x70, 0x19, 0x3c, 0x1c, 0xc2, 0xa7, 0x7a, 0xd5, 0xc9, 0xea}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
