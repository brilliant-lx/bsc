// Code generated by go-bindata. DO NOT EDIT.
// sources:
// faucet.html (10.853kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3a\xdb\x72\xe3\x3a\x72\xcf\x9e\xaf\xe8\x65\x66\x8f\xa4\x8c\x49\xea\x6e\x59\x12\x75\x6a\x64\x7b\x76\x9d\xaa\xcc\x4e\xed\xcc\xa9\x6c\xea\xec\xa9\x14\x48\xb4\x24\x8c\x49\x80\x07\x00\x65\x6b\x55\x7a\xcf\x6b\xbe\x20\xbf\x98\x4f\x48\x01\xbc\x88\xba\xd8\x3b\x97\xb3\x95\x8a\x1f\x64\x02\x68\x74\x37\xfa\x8e\x26\xa7\xbf\xbb\xfd\xd3\xcd\xa7\x7f\xff\x70\x07\x2b\x9d\xc4\xb3\x57\x53\xf3\x0f\x62\xc2\x97\x81\x83\xdc\x99\xbd\xba\x98\xae\x90\xd0\xd9\xab\x8b\x8b\x69\x82\x9a\x40\xb4\x22\x52\xa1\x0e\x9c\x4c\x2f\xdc\x91\xb3\x5f\x58\x69\x9d\xba\xf8\x6b\xc6\xd6\x81\xf3\x17\xf7\xa7\xb7\xee\x8d\x48\x52\xa2\x59\x18\xa3\x03\x91\xe0\x1a\xb9\x0e\x9c\xfb\xbb\x00\xe9\x12\x6b\xfb\x38\x49\x30\x70\xd6\x0c\x1f\x53\x21\x75\x0d\xf4\x91\x51\xbd\x0a\x28\xae\x59\x84\xae\x1d\x5c\x02\xe3\x4c\x33\x12\xbb\x2a\x22\x31\x06\x1d\x67\xf6\xca\xe0\xd1\x4c\xc7\x38\xdb\x6e\xbd\xf7\xa8\x1f\x85\x7c\xd8\xed\xc6\xf0\x8e\x64\x11\xea\xa9\x9f\xaf\x59\xb0\x98\xf1\x07\x58\x49\x5c\x04\x8e\x61\x56\x8d\x7d\x3f\xa2\xfc\xb3\xf2\xa2\x58\x64\x74\x11\x13\x89\x5e\x24\x12\x9f\x7c\x26\x4f\x7e\xcc\x42\xe5\xeb\x47\xa6\x35\x4a\x37\x14\x42\x2b\x2d\x49\xea\xf7\xbc\x9e\x77\xe5\x47\x4a\xf9\xd5\x9c\x97\x30\xee\x45\x4a\x39\x20\x31\x0e\x1c\xa5\x37\x31\xaa\x15\xa2\x76\xc0\x9f\x7d\x1b\xdd\x85\xe0\xda\x25\x8f\xa8\x44\x82\x7e\xdf\xbb\xf2\xda\x96\x64\x7d\xfa\x65\xaa\x86\xac\x8a\x24\x4b\x35\x28\x19\x7d\x31\xdd\xcf\xbf\x66\x28\x37\x7e\xcf\xeb\x78\x9d\x62\x60\xe9\x7c\x56\xce\x6c\xea\xe7\x08\x67\xdf\x85\xdb\xe5\x42\x6f\xfc\xae\xd7\xf7\x3a\x7e\x4a\xa2\x07\xb2\x44\x5a\x52\x32\x4b\x5e\x39\xf9\x9b\xd1\x7d\x4e\x87\x9f\x8f\x55\xf8\x5b\x10\x4b\x44\x82\x5c\x7b\x9f\x95\xdf\xf5\x3a\x23\xaf\x5d\x4e\x9c\xe2\xb7\x04\x8c\xd2\x0c\xa9\x0b\x6f\x8d\x52\xb3\x88\xc4\x6e\x84\x5c\xa3\x84\xad\x99\xbd\x48\x18\x77\x57\xc8\x96\x2b\x3d\x86\x4e\xbb\xfd\xfb\xc9\xb9\xd9\xf5\x2a\x9f\xa6\x4c\xa5\x31\xd9\x8c\x61\x11\xe3\x53\x3e\x45\x62\xb6\xe4\x2e\xd3\x98\xa8\x31\xe4\x98\xed\xc2\xce\xd2\x4c\xa5\x58\x4a\x54\xaa\x20\x96\x0a\xc5\x34\x13\x7c\x6c\x2c\x8a\x68\xb6\xc6\x73\xb0\x2a\x25\xfc\x64\x03\x09\x95\x88\x33\x8d\x47\x8c\x84\xb1\x88\x1e\xf2\x39\xeb\xbf\xf5\x43\x44\x22\x16\x72\x0c\x8f\x2b\x56\x6c\x03\x4b\x08\x52\x89\x05\x7a\x48\x09\xa5\x8c\x2f\xc7\x30\x4c\x8b\xf3\x40\x42\xe4\x92\xf1\x31\xb4\xf7\x5b\xa6\x7e\x29\xc6\xa9\x9f\x87\xaa\x57\x17\xd3\x50\xd0\x8d\x99\xa1\x6c\x0d\x8c\x06\x8e\xc4\x88\xa4\x3a\x5a\x91\xff\xc0\x18\x8d\x46\x8c\x2a\x28\x5b\x5b\xe0\x12\x28\x8f\x3c\x74\x2e\xe8\xc6\x81\x28\x26\x4a\x05\xce\x91\x5e\x6c\xdc\xca\x77\x14\x00\x66\x13\x61\xbc\x5c\x3a\x58\x93\xe2\xd1\x01\xcb\x5d\xe0\xe4\x9c\xbb\xa1\xd0\x5a\x24\x63\xe8\x98\x33\x15\x5b\x8e\xf0\xc5\x6e\xbc\x74\x3b\x5d\x67\xf6\x0a\x9e\xf9\x9b\xae\x3a\x25\x5a\x8d\x4f\xda\xb5\x6a\xae\x14\xec\xcc\xa6\xac\xc4\xb6\x20\xb0\x20\x6e\x48\xf4\xca\x01\x22\x19\x71\x57\x8c\x52\xe4\x81\xa3\x65\x86\x46\x06\x6c\xf6\x69\xc5\x14\x3c\x62\xa8\x98\x46\x78\x64\x71\x0c\x5c\x40\x2c\xf8\x12\x25\x84\x08\x09\x61\xf9\x01\xe9\x34\x94\xfe\x6c\x4a\x8e\x22\x19\x65\x2a\x12\x92\x7a\xcb\xa5\x1f\xf2\x30\x5a\x11\xc6\x9d\xd9\x87\x18\x89\x42\x58\x33\xc5\x34\xe8\x15\x02\xc7\x47\x58\xa3\x54\x4c\x70\x08\x37\x10\xc5\x2c\x7a\x60\x7c\x09\xff\xf3\xdf\xff\xf5\x9f\xde\xd4\x27\xb3\xa9\xbf\xea\x94\xd2\xc8\x15\x73\xfc\x78\x24\xd7\xe7\x45\x37\x82\xe2\x41\x2c\x16\x0a\xb5\xdb\x2d\x61\x0f\x80\x19\x4f\x33\xed\x2e\xa5\xc8\xd2\x6a\xfd\x62\x6a\x67\xad\x31\x64\x32\x76\x8a\xdc\x64\x1f\xf5\x26\x2d\xc4\x5d\xd9\xc6\x42\xc8\xc4\x35\xfa\x97\x22\x76\x20\x8d\x49\x84\x2b\x11\x53\x94\x81\x73\x6f\xf1\x6c\x44\x26\x61\xfe\x7e\x0e\x1f\x13\x22\x35\xdc\x18\xe1\x00\xa1\xd4\x38\x92\xe7\x79\x35\xba\xd6\xab\x4e\x39\x73\x43\xcd\xf7\x50\x17\xd3\x30\xd3\x5a\x54\x80\xa1\xe6\x10\x6a\xee\x52\x5c\x90\x2c\xd6\x40\xa5\x48\xa9\x78\xe4\xae\x16\xcb\xa5\xc9\xba\x39\xcf\xf9\x26\x07\x28\xd1\xa4\x58\x0a\x9c\x12\xb6\x34\x0b\xa2\x52\x91\x66\x69\x61\x18\xf9\x24\x3e\xa5\x84\x53\xa4\xc6\x8c\x62\x85\xce\xec\x0f\x6c\x8d\x90\xa0\x39\xd2\xc5\xb1\x8d\x45\x44\xa2\x76\xeb\x28\x4f\x2c\x6d\xea\xe7\xac\xe4\x07\xaa\x8c\x39\x8b\x4b\x4c\xd5\x01\x12\xe4\x19\x1c\x8c\x5c\x69\xe2\x5d\x25\x0b\x80\xed\x56\x12\xbe\x44\x78\xcd\xe8\xd3\x25\xbc\x26\x89\xc8\xb8\x86\x71\x00\xde\x5b\xfb\xa8\x76\xbb\x03\x32\x00\xd3\x98\x81\xb1\xdf\x17\x3c\x07\x04\xb7\xa6\x19\x38\x9a\xa1\x0c\xb6\x5b\x83\x7d\xb7\x9b\xa8\x4d\x12\x8a\x38\x68\xcc\xdf\xcf\x1b\x13\x95\x85\x09\xd3\xcd\x96\x33\xdb\x6e\x0b\xba\xbb\x5d\x6e\xc3\x31\x9b\x6d\xb7\xc8\xe9\x11\xed\xa9\x9f\xc5\x7b\x5d\xfb\x46\xd9\xff\xdf\x54\xff\x01\x97\xcb\x0d\x68\xf1\x80\x5c\xfd\x1f\xa9\x7e\xaf\xf2\x5c\x1d\x97\xf0\x3a\xc4\xb4\x8b\xf7\x7c\x21\xac\xe2\xe7\xe5\xa8\xd4\xbd\x15\x5c\xcc\xbe\x58\xe9\x85\x9a\xb7\xdb\x82\xc2\x6e\x37\x81\x03\x6d\x57\xf4\x0a\x23\xfb\xa8\xe5\x6e\x07\x35\xf8\x6f\x35\x83\x5a\xa0\xfb\xc2\xf8\x77\x94\x57\xb4\x48\xc7\xd0\xeb\xd6\x92\xca\xb9\xd0\x38\x3c\x0a\x8d\xbd\xb3\xc0\x29\xe1\x18\x83\xfd\x75\x55\x42\xe2\xf2\xb9\x30\xb6\x5a\xd8\x3a\xde\xe4\x86\x36\x77\x16\xac\x55\xf9\xbb\x3d\x01\xb1\x46\xb9\x88\xc5\xe3\x18\x48\xa6\xc5\x04\x12\xf2\x54\xd5\x30\xbd\x76\xbb\xce\xb7\x29\xe8\x49\x18\x63\x91\xb8\x7f\xcd\x50\x69\x55\x05\xdd\x7c\xc9\xfe\x9a\xd8\x4b\x91\x2b\xa4\x47\xd2\x30\x14\x8d\xdd\x59\xa8\x9a\xc4\xf7\x32\x3e\xc7\xfb\x42\x88\x2a\xc3\xd7\xd9\x28\x50\xd7\x2a\x18\x67\x36\xd5\x72\x0f\x77\x31\xd5\xf4\xab\xf2\xb1\x34\x65\xfb\x33\x9e\x02\x79\x40\x30\x67\x4f\x11\x65\x5e\x33\x1a\x4b\x01\x3b\x9c\xfa\x9a\x7e\x07\x65\x13\x08\x42\xa2\xf0\x4b\xc8\xdb\xea\x6d\x4f\xde\x0e\xbf\x97\xfe\x0a\x89\xd4\x21\x12\xfd\x25\x0c\x2c\x32\x4e\x6b\xe7\x9f\xbf\x9f\x7f\x2f\xf9\x8c\x33\x5b\x85\xe8\xcd\x97\xd2\x47\xba\x67\x20\x1f\x1f\xb2\x30\xf5\xb5\x7c\xd9\xd2\xfe\x01\xae\xfd\x5c\xbd\x58\x10\x5c\xf5\x66\x7f\x14\x8f\x40\x05\x2a\xd0\xb6\xba\x13\xf2\xe1\xc7\xa9\xbf\xea\x55\x20\xe9\x69\x21\xa7\x51\x69\x8e\xda\x0b\x55\xa4\x22\xc2\xf3\x8b\x4d\x5e\xab\xf8\xed\xa7\x61\x84\x23\xfa\xb6\x3b\xba\xeb\x2e\x46\xc3\x7e\xbf\xdb\x1e\xf5\xdb\xd1\xbb\xab\x7e\xff\xaa\x8f\xef\x16\x83\xc5\xed\xa8\x7d\x37\x1c\xcc\x47\xce\x6c\xfe\xe9\xc6\x44\xc1\xcb\xaf\x24\x40\x87\xc3\x68\x38\xef\xbf\x6b\x87\x38\xba\xb9\x1b\x84\xbd\xeb\xdb\x41\xf7\xae\xfd\x8e\x76\x7a\xfd\x7e\xd4\x1b\x5d\x5f\x77\xaf\xe7\xbd\xab\x91\x33\xbb\xfb\xf4\xc7\x6f\x21\x40\x46\xbd\xc1\xd5\xa0\x7f\xdd\xbe\xbd\xa2\x8b\xfe\x5d\xf7\x5d\xff\x2a\xbc\xba\xed\x8d\x70\xd1\x1b\x74\x48\xf7\xaa\xdb\x8d\xde\xf6\x07\xe1\xb5\x33\xfb\xcb\x9f\x3f\x7c\x0b\x01\xa4\xdd\xfe\x22\xea\x0d\xe9\x00\xb1\xdb\xe9\x20\xe9\x0e\xc8\xa8\xdd\xed\x5d\x2f\xc2\x51\xd4\x8f\x16\x74\xd4\x5e\x74\xba\x88\xce\x6c\xfe\xd3\xc7\xdb\x6f\xa1\xd0\xeb\x5d\x0d\x3b\x6d\xda\xbd\x8a\x86\xa3\xee\x5d\xaf\x7f\x75\x73\x1d\xdd\x0e\xdb\xf3\xdb\x7e\xd8\x0b\x3b\xed\xab\x9b\x6b\xda\xeb\xd3\x5b\xea\xcc\x7e\xfa\x78\xfb\xe9\x5b\x28\x0c\xfb\x83\x7e\xff\x7a\x78\x8d\xf4\xea\x6e\xbe\x18\x2c\xda\xa3\xde\xf0\xea\xba\xdb\xeb\xf5\xba\x83\xde\x60\x78\x17\xde\x5d\xf5\x46\xd7\xbd\xb6\xa5\xf0\x4d\x7a\xbe\xbb\x19\xd0\x9b\x70\x70\x1b\x2e\xfa\xf3\x4e\xa7\x7f\x73\x4d\xdb\xef\x86\x83\x79\x74\xf3\x36\xec\x5f\xdf\xdd\x0c\xfa\xef\x86\x6f\xdb\xa3\xe1\x95\x33\xbb\x7d\x7b\x6f\x08\x00\x91\x08\x4c\xa9\x0c\x29\x10\x05\xf3\xbb\x0f\xdd\x76\x5e\x88\x78\x53\x3f\xad\x59\x34\xdc\x98\x2c\x0e\x5a\xc0\x12\x35\x50\xd4\x84\xc5\x40\x42\x91\x69\x38\xe1\x71\xc9\xf4\x2a\x0b\x2d\x6b\x21\x0f\x5d\x7b\x6d\xf1\xe7\x77\x1f\x94\x1f\xc6\x22\xf4\x13\xa2\x34\x4a\xdf\xd2\xf2\x12\xea\xcc\xec\x93\xe1\x26\xa7\x59\x23\xfa\x31\x4b\x53\x21\x35\xdc\xe6\xf7\xa0\xf1\x21\xad\xe7\x2e\x48\x70\x66\x16\xec\x69\x6b\x67\xda\x6e\xd9\x02\xbc\x3f\x97\x57\xd7\xdd\x6e\x8a\xc9\xec\xd3\x0a\x61\x61\x7b\x5b\xc0\x14\xc8\x8c\x73\x73\x8f\x92\x78\x93\x03\x41\x2a\x85\xc6\xc8\x5c\xcb\x81\x2c\x09\xe3\x4a\x43\x28\xb4\xf2\xa6\x3e\x26\x07\x55\xc9\xf9\x60\x54\x3d\x55\xd7\xe3\xb2\x0f\x62\x97\x7d\x1f\xfe\x10\x8b\x90\xc4\xb0\x36\xf1\x33\x8c\x4d\x88\x11\x60\xae\x3d\xf6\x9e\x17\x65\x52\x22\xd7\xa0\x34\xd1\x99\x02\xb1\xb0\xb3\x39\xbf\x66\xff\x9a\x48\x20\x5a\x63\x92\x6a\x08\x8a\x5b\xbc\x99\x53\x28\xd7\x45\x6f\xc2\x0c\x4d\xf5\x7d\xb8\x9e\x57\x66\x8e\x53\xcd\x94\x85\x01\x04\xf0\xf3\x2f\xd5\x6c\x21\xaa\xc9\xab\x82\xd9\x5b\x5c\x30\x8e\x40\x4c\xec\xce\x85\xa2\x57\x44\x43\x24\x91\x68\x54\x10\xc5\x42\x65\x32\x3f\x83\xa9\x39\xc1\x9c\xa3\xc4\x5c\xe2\x34\x0b\xa9\xe5\xa7\x44\xd2\x5c\x11\xb5\x6a\x15\x6d\x0a\x89\x3a\x93\x7c\xbf\x56\xce\x5f\x2c\x84\x84\xa6\x41\xc0\x82\xf6\x04\xd8\xb4\xc4\xeb\xc5\xc8\x97\x7a\x35\x01\xf6\xe6\x4d\x05\x7c\xc1\x16\xd0\x2c\x21\x7e\x66\xbf\x78\xfa\xc9\x33\x54\x20\x08\xa0\x4e\xcd\x12\x2c\xf0\xa8\x34\x66\x11\x36\xd9\x25\x74\x5a\x93\x72\x35\x94\x48\x1e\xca\x51\xa1\xe9\xfc\x9f\xfd\xdd\xe5\xa2\xa1\x22\xca\x6c\x63\x6a\x89\xfa\x2e\xef\x88\xcc\x37\xf7\xb4\x79\xd0\x03\x69\x79\x36\x11\x79\x45\x3f\x07\x02\x70\xb8\xe0\xe8\xe4\x28\x72\x25\x14\x02\xbf\x21\x71\x1c\x92\xe8\xa1\x2e\xa4\x92\xe5\x55\x01\xe3\x49\xe4\x14\x65\xb3\x71\xd2\x8c\x69\x5c\x96\xa7\x6b\x28\xa6\xf1\x01\x37\x0d\x18\x43\x63\xbb\xad\x1b\x7f\xe3\xb2\x00\x89\x0a\x5a\x06\x86\x28\xc5\x96\xbc\xa4\x9e\x43\xec\x72\x61\xec\xf6\x6c\x1e\x42\xd5\x79\x5c\x16\xe8\x4b\x5e\xbf\x55\x2e\x79\xad\x34\x79\x19\xc7\x69\x13\xea\x79\x09\x1b\x44\x05\x34\x04\xb0\xac\xec\x3a\x3f\xd8\x81\x71\x5b\x0f\x3b\x30\xef\xfc\xce\xa2\x80\xc0\x92\x29\x0d\x99\x8c\x8d\x81\x1b\xb8\xdc\xcf\x2a\xaf\xb2\x70\xe7\x74\x96\xc3\x79\x0a\x39\x6d\xfe\xcb\xc7\x3f\xbd\xf7\x94\x96\x8c\x2f\xd9\x62\xd3\xdc\x66\x32\x1e\xc3\xeb\xa6\xf3\x4f\x99\x8c\x9d\xd6\xcf\xed\x5f\xbc\x35\x89\x33\xbc\x2c\x9c\x74\x0c\xe5\xf5\xcc\x78\xf1\xd8\xfe\x9e\x44\xb2\xcb\xd2\x53\xc7\xe5\x43\x11\x9a\x76\xad\xd6\xe4\x04\xfa\xd8\x8c\x14\xea\xa6\x01\xab\x82\xd9\xb1\x48\x08\x24\xa8\x57\x82\x9a\x63\x4b\x8c\x04\xe7\x18\x69\xc8\x52\xc1\x0b\x09\x40\x2c\x94\xaa\x59\x71\x01\xf1\xac\x24\x20\xb0\x2d\xac\x7f\xc3\xf0\xa3\x88\x1e\x50\x37\x9b\xcd\x47\xc6\xa9\x78\xf4\x62\x11\x11\xb3\xc1\x33\x81\x57\x44\x22\x86\x20\x08\xa0\x48\x34\x4e\x0b\x7e\x04\xe7\x51\x99\x94\xe3\xc0\xd8\x3c\x9a\xa7\x16\xbc\x81\xe3\xed\x2b\xa1\x34\xbc\x01\xc7\xcf\x83\xa5\xb9\x78\x49\xed\x93\x94\x39\xad\xdc\x90\x4b\x9d\x08\x9e\xa0\x52\x64\x89\x75\x6e\x71\x8d\x5c\x57\x31\xc2\x1c\x2a\x51\x4b\x08\xc0\xea\x2e\x25\x52\x61\x0e\xe2\x99\x0b\x40\x19\x2c\x4c\xc8\xb1\x60\x41\x00\x3c\x8b\xe3\x7d\x8c\xc9\x63\xda\xa4\x8c\x1e\x07\xe0\x9e\x2d\xcb\xe1\x77\x41\x00\xa6\x1e\x36\xf2\xa6\xfb\x9d\xc6\x2e\xf2\xba\xbd\xe5\x99\x92\x7c\xbf\xa3\x35\xa9\x07\xa3\x03\x6c\x48\xff\x1e\x3a\xa4\xc7\xf8\x90\x3e\x83\xd0\x5e\x93\x5e\xc2\x97\x5f\xab\x6a\xe8\xec\xc4\x33\xd8\x78\x96\x84\x28\x5f\x42\x97\xbb\x7e\x81\xce\x8a\xfa\x9e\xeb\xda\xde\x4b\xe8\x0c\x5b\xcf\x60\x47\x29\xc5\xb3\xc8\xb9\xd0\x9b\xe6\x36\x26\x1b\x91\xe9\x31\x34\xb4\x48\x6f\xec\xbd\xa6\x71\x09\x86\xd6\x18\x2a\x0c\x97\xb6\xdd\x33\x86\x86\x1d\x99\x75\x96\xa0\xdd\x35\x68\xb7\xdb\x97\x50\x36\xef\xe7\xc4\xf8\xa3\xcc\x70\xf7\x0c\x3f\x2a\x8b\x22\x54\xcf\x4a\xef\x8b\x38\x2a\x70\x54\x3c\x15\xe3\xef\xe0\xaa\x4a\xf5\x07\x6c\xc1\x0f\x3f\xc0\xc9\xea\xa1\x19\xfb\x3e\xfc\x2b\x91\x0f\x60\x5b\x18\x12\xd7\x4c\x64\x6a\x5f\x38\x24\x4c\x29\x53\x3b\x11\x05\x54\x70\x2c\xf6\x7c\x5d\xd6\x3e\xe1\xb1\x00\x83\x19\xb4\x8f\x19\x34\x91\xb2\x96\xd5\xcf\x24\xfb\x1a\xde\xc3\x3c\x7e\xb1\xab\xd3\x3b\xd8\xc9\x12\x84\xdf\x05\xe0\x38\xf5\xcd\x27\x10\x06\xa0\x42\x76\xa1\x50\x7f\xca\x75\xd1\x2c\x8a\x9b\x73\xa5\x47\xeb\x12\x7a\xed\x76\xbb\x75\xc2\xc4\x6e\x2f\xde\xb7\x69\x8a\x9c\x02\xe1\x1b\x1b\x1f\x2b\xd9\x32\xae\x05\x88\xcc\xc4\xd9\x88\xc4\x10\x89\x38\xce\x8b\xd2\x62\xab\xad\xd5\x44\x92\x08\x0e\x01\xb8\x9d\xc9\x99\x22\xa8\x26\xc9\xda\xd1\x8e\xd5\x73\x46\xf6\xc7\x2a\x3a\x94\xd9\x11\xb0\xdb\x39\x50\xca\x81\xbe\xce\x2b\xe6\xa2\xe2\x9b\xed\x25\x7a\xa4\xae\xbd\xbe\x8e\x65\x56\xe3\x3f\xc7\xf3\xa6\xf3\x85\xc7\xa8\x96\xd3\x4c\xad\x9a\x47\x8c\xb6\x26\xa7\xba\xb9\xd7\x28\x89\x46\xdb\x7a\xb3\xba\x40\xae\x99\xc4\x13\x95\x00\xe1\xa6\xe8\x75\xf3\xf2\xac\x2c\x27\xa8\x71\x0d\xdb\xd6\x38\x50\x99\x7d\x37\x7f\x60\x4e\x5f\xe9\x30\xb6\xa2\x16\x1c\x01\x00\x8e\x9c\xc0\x1a\xea\x81\xa5\x1a\x60\x8c\x49\xaa\x90\x42\x00\xf9\xbb\xd4\x66\xcb\xcb\x38\x7b\x6a\xb6\xdc\x62\x7c\x8c\xa3\x5c\x9f\x94\xd7\xb4\x8b\x92\xed\x37\x01\x38\x53\x2d\x81\xd1\xa0\xe1\xc0\x9b\x73\x2e\x68\x52\x70\x63\xb6\xe7\xa0\xbe\x15\x60\xaa\xe9\xcc\x36\x5f\xf2\x0e\xcd\x5f\x1d\x53\x4f\x2e\xa5\xc8\x38\x1d\x9b\x32\xab\x79\x82\x96\xac\x89\x26\xd2\x62\x6d\x4d\x60\x0f\xee\x2a\xf6\x37\x1c\x43\x64\x94\x33\x81\xbc\xb7\x68\x7b\x3c\x50\x75\x45\xed\x28\x14\x92\xa2\x74\x25\xa1\x2c\x53\x63\xe8\xa7\x4f\x93\xbf\x96\xef\x2e\x6d\x27\xea\x45\x56\x53\x89\xb3\x13\x8e\xa2\xc8\xbe\x2a\x79\x03\xce\xd4\x37\x00\x7f\x0f\x4d\x75\xd8\xfa\x3b\x5c\x38\xd3\x6f\x83\xea\x65\x69\x31\x9f\x30\x4a\x63\x34\x0c\xef\xd1\x1b\x67\x34\xfa\xaf\xbb\xd4\x21\x49\x28\x1a\x6d\xfb\x3d\x3b\xc0\x58\xe1\x0b\x1b\xaa\x9e\x5d\xc3\x18\x80\x6b\x8e\xcc\xac\xcc\x8b\x2e\x99\x9d\x96\x0d\x2b\x8b\xe2\x8d\x3c\xcd\xa4\x2d\xbc\x9a\x6e\x61\x60\x97\xd0\x50\xa6\x10\xa4\xaa\xd1\xf2\x56\x59\x42\x38\xfb\x1b\x36\x4d\x5e\x6a\xe5\xb2\xb2\x4d\x40\xe7\x34\x24\x9f\x30\xb3\xef\xce\x35\xca\x1c\xd7\x28\x84\xd8\x28\xb5\x6b\x14\x59\x7b\x9b\xdd\xf8\x4a\x09\x9d\xa7\xe2\x86\x44\x42\x7d\xe0\x96\xc9\x17\xa4\x30\xd4\xcb\xb5\x90\xc8\x46\xde\x00\xb5\xa5\x3b\x17\x8f\x41\xa3\xd7\xae\x98\xcc\x15\x6d\xf5\xdc\x28\x6c\xed\x44\x19\x86\xcb\xd2\x35\x67\xd0\x6b\xff\x16\xdc\x52\x62\xdf\x3a\x1f\x9e\x40\x4b\x96\x22\x05\x12\x69\xb6\xc6\x7f\xc0\x41\x7e\x03\x21\x7f\x35\x8b\xc6\x0e\x4b\xe1\x59\x33\x3d\xe0\xd7\xac\x56\xb2\xfd\x67\xe3\x6f\xe0\x5b\x09\xbf\x01\xe7\xec\x41\x9e\xb5\xc4\x23\xc0\x23\xd7\x7e\xde\xef\x6d\x57\xdb\x39\xce\x29\xa6\xda\xad\xde\xc7\xb4\xbc\x95\x4e\xe2\xa6\x33\xd5\xf6\x5b\x0b\xc3\x73\x85\xc1\x22\xc8\xa7\x0f\x4b\xba\xdd\xe1\x45\x26\x8a\x85\xc2\xa3\x4b\x17\xd4\x8a\x93\xea\x62\x56\x56\x22\xb0\xdb\x7f\x92\xe2\xfb\xf0\x51\x13\xa9\x81\xc0\x4f\xf7\x90\xa5\x94\x68\x93\xbd\x04\x98\xfc\x68\xb3\x58\xf5\xcd\x4a\x48\xa4\x82\x85\x90\x8f\x44\x52\xc8\xb8\x66\xb1\x59\xdf\xd8\xce\x62\x59\xfa\x29\xd4\xf7\x26\x8a\xad\x49\xdc\x3c\xb9\x04\xbe\x6e\x36\xbc\xba\xca\x1b\x2d\x0f\x49\xb4\x3a\x05\xb4\x19\xab\xa2\x1b\xc0\x7b\x7b\x05\x68\xbe\x6e\xea\x15\x53\x2d\x8f\x68\x2d\x9b\x8d\x03\x63\x68\xb4\x8c\x5e\x3b\xb5\x2b\x59\xb5\x7d\x7a\xe0\x56\x2f\xe1\xd8\x17\xd3\x55\x21\x50\x82\x47\x4a\x35\x73\xbb\x6a\x5c\xd6\x70\x1f\x9a\x55\xe3\xf7\x8d\x4a\x51\x7b\xf7\xde\x9f\x23\x38\xcb\xc9\x01\xea\x86\xf1\xb2\xc6\x09\x79\x42\xe9\x8d\xf1\x9f\xa6\x73\xc6\xd3\x8f\xad\xa3\x55\x09\x3b\x8f\xd7\x2f\x4a\x99\x71\x8a\x4f\xcf\x89\x98\xd1\x46\xcb\x53\x59\x98\xb7\x2d\x9a\x83\xea\x02\x56\x82\x59\xe3\x3d\x4e\x05\x27\x05\x85\x21\x71\x58\x54\xb8\x47\x45\xc8\x0b\x59\xa3\x20\x99\x9f\x6a\x77\x69\x04\xde\x6e\x55\x9d\xc9\x3b\x65\x8a\x2b\xa6\x56\x40\xec\xd7\x37\xb6\xad\x00\x85\xbd\xdb\x4e\x4e\xde\xb1\x79\xfb\xe1\xbe\xd6\xb5\xa9\x3c\xa2\x69\xb1\x57\x9f\x93\x9d\x6b\x99\x9c\xfd\x7e\xed\xb3\xf2\xaa\x46\x4a\x24\x12\xbf\xe3\x93\x94\x79\x9f\xd5\x8f\x82\xc7\x82\xd0\xe0\xa4\xa3\xf7\x43\x5e\x16\x06\xf8\x94\xc6\x2c\x62\xda\xb1\x87\x22\x6a\xc3\x23\xa0\xb8\x40\x39\xab\x31\x51\x34\x64\xa6\x7e\xfe\xfd\xd5\xd4\xcf\x3f\x2a\xfd\xdf\x00\x00\x00\xff\xff\x95\xc8\xac\x01\x65\x2a\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3, 0x2a, 0x94, 0xa6, 0xe0, 0x5b, 0xed, 0xb2, 0xef, 0x59, 0x4b, 0xf3, 0x10, 0xe7, 0x1d, 0x48, 0x31, 0x37, 0x9c, 0xe6, 0xf9, 0xec, 0xe9, 0x4c, 0xf1, 0xdb, 0xec, 0xbc, 0xc8, 0x31, 0x6c, 0xa2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
