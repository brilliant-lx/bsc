// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: proposer.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Proposer_ProposeBlock_FullMethodName      = "/protobuf.Proposer/ProposeBlock"
	Proposer_RegisterValidator_FullMethodName = "/protobuf.Proposer/RegisterValidator"
)

// ProposerClient is the client API for Proposer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProposerClient interface {
	ProposeBlock(ctx context.Context, in *ProposeBlockRequest, opts ...grpc.CallOption) (*ProposeBlockResponse, error)
	RegisterValidator(ctx context.Context, in *RegisterValidatorRequest, opts ...grpc.CallOption) (*RegisterValidatorResponse, error)
}

type proposerClient struct {
	cc grpc.ClientConnInterface
}

func NewProposerClient(cc grpc.ClientConnInterface) ProposerClient {
	return &proposerClient{cc}
}

func (c *proposerClient) ProposeBlock(ctx context.Context, in *ProposeBlockRequest, opts ...grpc.CallOption) (*ProposeBlockResponse, error) {
	out := new(ProposeBlockResponse)
	err := c.cc.Invoke(ctx, Proposer_ProposeBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proposerClient) RegisterValidator(ctx context.Context, in *RegisterValidatorRequest, opts ...grpc.CallOption) (*RegisterValidatorResponse, error) {
	out := new(RegisterValidatorResponse)
	err := c.cc.Invoke(ctx, Proposer_RegisterValidator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProposerServer is the server API for Proposer service.
// All implementations must embed UnimplementedProposerServer
// for forward compatibility
type ProposerServer interface {
	ProposeBlock(context.Context, *ProposeBlockRequest) (*ProposeBlockResponse, error)
	RegisterValidator(context.Context, *RegisterValidatorRequest) (*RegisterValidatorResponse, error)
	mustEmbedUnimplementedProposerServer()
}

// UnimplementedProposerServer must be embedded to have forward compatible implementations.
type UnimplementedProposerServer struct {
}

func (UnimplementedProposerServer) ProposeBlock(context.Context, *ProposeBlockRequest) (*ProposeBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeBlock not implemented")
}
func (UnimplementedProposerServer) RegisterValidator(context.Context, *RegisterValidatorRequest) (*RegisterValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterValidator not implemented")
}
func (UnimplementedProposerServer) mustEmbedUnimplementedProposerServer() {}

// UnsafeProposerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProposerServer will
// result in compilation errors.
type UnsafeProposerServer interface {
	mustEmbedUnimplementedProposerServer()
}

func RegisterProposerServer(s grpc.ServiceRegistrar, srv ProposerServer) {
	s.RegisterService(&Proposer_ServiceDesc, srv)
}

func _Proposer_ProposeBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProposerServer).ProposeBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Proposer_ProposeBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProposerServer).ProposeBlock(ctx, req.(*ProposeBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proposer_RegisterValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProposerServer).RegisterValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Proposer_RegisterValidator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProposerServer).RegisterValidator(ctx, req.(*RegisterValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Proposer_ServiceDesc is the grpc.ServiceDesc for Proposer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Proposer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Proposer",
	HandlerType: (*ProposerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProposeBlock",
			Handler:    _Proposer_ProposeBlock_Handler,
		},
		{
			MethodName: "RegisterValidator",
			Handler:    _Proposer_RegisterValidator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proposer.proto",
}
